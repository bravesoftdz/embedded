C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE OLEDTEST
OBJECT MODULE PLACED IN oledtest.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE oledtest.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "NEW_8051.H"
   2          #include "ssd1306.h"
   3          #include "zimo.h"
   4          #include "newszimo.h"
   5          #include "ds18b20.h"
   6          /////////////////////////////////
   7          sbit UP=P3^2;
   8          sbit DOWN=P3^3;
   9          //////////////////////////////////
  10          unsigned char t0=0;t1=0;t2=0;t3=0;
  11          unsigned char temp=0,s=0,min=0,hour=0;
  12          unsigned char state=1;
  13          unsigned int Temperature=0;
  14          
  15          ////////////////////////////////////
  16          bit display_sign=1;
  17          
  18          /////////////////////////////////
  19          void welcome(void);
  20          void tm0_ini(void);
  21          void delay(unsigned char i);
  22          void delay_ms(unsigned int time);
  23          
  24          
  25          void send_UART(unsigned char i)
  26          { ES=0;
  27   1        TI=0;
  28   1        SBUF=i;
  29   1        while(TI==0);
  30   1        TI=0;
  31   1        ES=1;
  32   1      }
  33          
  34          void stc12C4052ad_uart_init(void)
  35          {  SCON=0X50;           //
  36   1         TMOD=0X21;           //
  37   1         TH1=0xff;     //19200bps
  38   1         TL1=0xfc;     //19200bps
  39   1         TR1=1;
  40   1         ES=1;        //打开串口中断
  41   1         EA=1; 
  42   1      }
  43          
  44          /*
  45          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  46          //  Delay Time
  47          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  48          void uDelay(unsigned char l)
  49          {
  50                  while(l--);
  51          }
  52          
  53          
  54          void Delay(unsigned char n)
  55          {
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 2   

  56          unsigned char i,j,k;
  57          
  58                  for(k=0;k<n;k++)
  59                  {
  60                          for(i=0;i<131;i++)
  61                          {
  62                                  for(j=0;j<15;j++)
  63                                  {
  64                                          uDelay(203);    
  65                                  }
  66                          }
  67                  }
  68          }        */
  69          
  70          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  71          //  Instruction Setting
  72          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  73          void Set_Start_Column(unsigned char d)
  74          {
  75   1              Write_Command(0x00+d%16);               // Set Lower Column Start Address for Page Addressing Mode
  76   1                                                      //   Default => 0x00
  77   1              Write_Command(0x10+d/16);               // Set Higher Column Start Address for Page Addressing Mode
  78   1                                                      //   Default => 0x10
  79   1      }
  80          
  81          
  82          void Set_Addressing_Mode(unsigned char d)
  83          {
  84   1              Write_Command(0x20);                    // Set Memory Addressing Mode
  85   1              Write_Command(d);                       //   Default => 0x02
  86   1                                                      //     0x00 => Horizontal Addressing Mode
  87   1                                                      //     0x01 => Vertical Addressing Mode
  88   1                                                      //     0x02 => Page Addressing Mode
  89   1      }
  90          
  91          
  92          void Set_Column_Address(unsigned char a, unsigned char b)
  93          {
  94   1              Write_Command(0x21);                    // Set Column Address
  95   1              Write_Command(a);                       //   Default => 0x00 (Column Start Address)
  96   1              Write_Command(b);                       //   Default => 0x7F (Column End Address)
  97   1      }
  98          
  99          
 100          void Set_Page_Address(unsigned char a, unsigned char b)
 101          {
 102   1              Write_Command(0x22);                    // Set Page Address
 103   1              Write_Command(a);                       //   Default => 0x00 (Page Start Address)
 104   1              Write_Command(b);                       //   Default => 0x07 (Page End Address)
 105   1      }
 106          
 107          
 108          void Set_Start_Line(unsigned char d)
 109          {
 110   1              Write_Command(0x40|d);                  // Set Display Start Line
 111   1                                                      //   Default => 0x40 (0x00)
 112   1      }
 113          
 114          
 115          void Set_Contrast_Control(unsigned char d)
 116          {
 117   1              Write_Command(0x81);                    // Set Contrast Control
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 3   

 118   1              Write_Command(d);                       //   Default => 0x7F
 119   1      }
 120          
 121          
 122          void Set_Charge_Pump(unsigned char d)
 123          {
 124   1              Write_Command(0x8D);                    // Set Charge Pump
 125   1              Write_Command(0x10|d);                  //   Default => 0x10
 126   1                                                      //     0x10 (0x00) => Disable Charge Pump
 127   1                                                      //     0x14 (0x04) => Enable Charge Pump
 128   1      }
 129          
 130          
 131          void Set_Segment_Remap(unsigned char d)
 132          {
 133   1              Write_Command(0xA0|d);                  // Set Segment Re-Map
 134   1                                                      //   Default => 0xA0
 135   1                                                      //     0xA0 (0x00) => Column Address 0 Mapped to SEG0
 136   1                                                      //     0xA1 (0x01) => Column Address 0 Mapped to SEG127
 137   1      }
 138          
 139          
 140          void Set_Entire_Display(unsigned char d)
 141          {
 142   1              Write_Command(0xA4|d);                  // Set Entire Display On / Off
 143   1                                                      //   Default => 0xA4
 144   1                                                      //     0xA4 (0x00) => Normal Display
 145   1                                                      //     0xA5 (0x01) => Entire Display On
 146   1      }
 147          
 148          
 149          void Set_Inverse_Display(unsigned char d)
 150          {
 151   1              Write_Command(0xA6|d);                  // Set Inverse Display On/Off
 152   1                                                      //   Default => 0xA6
 153   1                                                      //     0xA6 (0x00) => Normal Display
 154   1                                                      //     0xA7 (0x01) => Inverse Display On
 155   1      }
 156          
 157          
 158          void Set_Multiplex_Ratio(unsigned char d)
 159          {
 160   1              Write_Command(0xA8);                    // Set Multiplex Ratio
 161   1              Write_Command(d);                       //   Default => 0x3F (1/64 Duty)
 162   1      }
 163          
 164          
 165          void Set_Display_On_Off(unsigned char d)        
 166          {
 167   1              Write_Command(0xAE|d);                  // Set Display On/Off
 168   1                                                      //   Default => 0xAE
 169   1                                                      //     0xAE (0x00) => Display Off
 170   1                                                      //     0xAF (0x01) => Display On
 171   1      }
 172          
 173          
 174          void Set_Start_Page(unsigned char d)
 175          {
 176   1              Write_Command(0xB0|d);                  // Set Page Start Address for Page Addressing Mode
 177   1                                                      //   Default => 0xB0 (0x00)
 178   1      }
 179          
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 4   

 180          
 181          void Set_Common_Remap(unsigned char d)
 182          {
 183   1              Write_Command(0xC0|d);                  // Set COM Output Scan Direction
 184   1                                                      //   Default => 0xC0
 185   1                                                      //     0xC0 (0x00) => Scan from COM0 to 63
 186   1                                                      //     0xC8 (0x08) => Scan from COM63 to 0
 187   1      }
 188          
 189          
 190          void Set_Display_Offset(unsigned char d)
 191          {
 192   1              Write_Command(0xD3);                    // Set Display Offset
 193   1              Write_Command(d);                       //   Default => 0x00
 194   1      }
 195          
 196          
 197          void Set_Display_Clock(unsigned char d)
 198          {
 199   1              Write_Command(0xD5);                    // Set Display Clock Divide Ratio / Oscillator Frequency
 200   1              Write_Command(d);                       //   Default => 0x80
 201   1                                                      //     D[3:0] => Display Clock Divider
 202   1                                                      //     D[7:4] => Oscillator Frequency
 203   1      }
 204          
 205          
 206          void Set_Precharge_Period(unsigned char d)
 207          {
 208   1              Write_Command(0xD9);                    // Set Pre-Charge Period
 209   1              Write_Command(d);                       //   Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
 210   1                                                      //     D[3:0] => Phase 1 Period in 1~15 Display Clocks
 211   1                                                      //     D[7:4] => Phase 2 Period in 1~15 Display Clocks
 212   1      }
 213          
 214          
 215          void Set_Common_Config(unsigned char d)
 216          {
 217   1              Write_Command(0xDA);                    // Set COM Pins Hardware Configuration
 218   1              Write_Command(0x02|d);                  //   Default => 0x12 (0x10)
 219   1                                                      //     Alternative COM Pin Configuration
 220   1                                                      //     Disable COM Left/Right Re-Map
 221   1      }
 222          
 223          
 224          void Set_VCOMH(unsigned char d)
 225          {
 226   1              Write_Command(0xDB);                    // Set VCOMH Deselect Level
 227   1              Write_Command(d);                       //   Default => 0x20 (0.77*VCC)
 228   1      }
 229          
 230          
 231          void Set_NOP()
 232          {
 233   1              Write_Command(0xE3);                    // Command for No Operation
 234   1      }
 235          
 236          
 237          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 238          //  Global Variables
 239          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 240          #define XLevelL         0x00
 241          #define XLevelH         0x10
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 5   

 242          #define XLevel          ((XLevelH&0x0F)*16+XLevelL)
 243          #define Max_Column      128
 244          #define Max_Row         64
 245          #define Brightness      0xCF
 246          
 247          
 248          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 249          //  Patterns
 250          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 251          unsigned char code UniV[][48]={                 // UniV OLED
 252                  0x00,0x00,0xFC,0xFC,0xFC,0xFC,0x00,0x00,0x00,0xFC,0xFC,0xFC,0xFC,0x00,0x00,0x00,0xE0,0xE0,0xE0,0xE0,0x60,
             -0xE0,0xE0,0xE0,0xC0,0x00,0x00,0x00,0xEC,0xEC,0xEC,0xEC,0x00,0x00,0x00,0x04,0x3C,0xFC,0xFC,0xF0,0x80,0x80,0xF0,0xFC,0xFC,
             -0x3C,0x04,0x00,
 253                  0x00,0x00,0x07,0x0F,0x1F,0x1F,0x1C,0x18,0x1C,0x1F,0x1F,0x0F,0x07,0x00,0x00,0x00,0x1F,0x1F,0x1F,0x1F,0x00,
             -0x1F,0x1F,0x1F,0x1F,0x00,0x00,0x00,0x1F,0x1F,0x1F,0x1F,0x00,0x00,0x00,0x00,0x00,0x01,0x0F,0x1F,0x1F,0x1F,0x1F,0x0F,0x01,
             -0x00,0x00,0x00,
 254                  0x00,0x80,0xE0,0xE0,0xF0,0x70,0x30,0x70,0xF0,0xE0,0xE0,0x80,0x00,0x00,0x00,0xF0,0xF0,0xF0,0xF0,0x00,0x00,
             -0x00,0x00,0x00,0x00,0x00,0xF0,0xF0,0xF0,0xF0,0x30,0x30,0x30,0x30,0x30,0x00,0x00,0x00,0xF0,0xF0,0xF0,0xF0,0x30,0x70,0xF0,
             -0xF0,0xE0,0x80,
 255                  0x00,0x0F,0x3F,0x3F,0x7F,0x70,0x60,0x70,0x7F,0x3F,0x3F,0x0F,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,0x60,0x60,
             -0x60,0x60,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,0x63,0x63,0x63,0x63,0x60,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,0x60,0x70,0x7F,
             -0x7F,0x3F,0x0F,
 256          };
 257          
 258          
 259          unsigned char code Ascii_1[240][5]={            // Refer to "Times New Roman" Font Database...
 260                                                          //   Basic Characters
 261                  {0x00,0x00,0x4F,0x00,0x00},             //   (  1)  ! - 0x0021 Exclamation Mark
 262                  {0x00,0x07,0x00,0x07,0x00},             //   (  2)  " - 0x0022 Quotation Mark
 263                  {0x14,0x7F,0x14,0x7F,0x14},             //   (  3)  # - 0x0023 Number Sign
 264                  {0x24,0x2A,0x7F,0x2A,0x12},             //   (  4)  $ - 0x0024 Dollar Sign
 265                  {0x23,0x13,0x08,0x64,0x62},             //   (  5)  % - 0x0025 Percent Sign
 266                  {0x36,0x49,0x55,0x22,0x50},             //   (  6)  & - 0x0026 Ampersand
 267                  {0x00,0x05,0x03,0x00,0x00},             //   (  7)  ' - 0x0027 Apostrophe
 268                  {0x00,0x1C,0x22,0x41,0x00},             //   (  8)  ( - 0x0028 Left Parenthesis
 269                  {0x00,0x41,0x22,0x1C,0x00},             //   (  9)  ) - 0x0029 Right Parenthesis
 270                  {0x14,0x08,0x3E,0x08,0x14},             //   ( 10)  * - 0x002A Asterisk
 271                  {0x08,0x08,0x3E,0x08,0x08},             //   ( 11)  + - 0x002B Plus Sign
 272                  {0x00,0x50,0x30,0x00,0x00},             //   ( 12)  , - 0x002C Comma
 273                  {0x08,0x08,0x08,0x08,0x08},             //   ( 13)  - - 0x002D Hyphen-Minus
 274                  {0x00,0x60,0x60,0x00,0x00},             //   ( 14)  . - 0x002E Full Stop
 275                  {0x20,0x10,0x08,0x04,0x02},             //   ( 15)  / - 0x002F Solidus
 276                  {0x3E,0x51,0x49,0x45,0x3E},             //   ( 16)  0 - 0x0030 Digit Zero
 277                  {0x00,0x42,0x7F,0x40,0x00},             //   ( 17)  1 - 0x0031 Digit One
 278                  {0x42,0x61,0x51,0x49,0x46},             //   ( 18)  2 - 0x0032 Digit Two
 279                  {0x21,0x41,0x45,0x4B,0x31},             //   ( 19)  3 - 0x0033 Digit Three
 280                  {0x18,0x14,0x12,0x7F,0x10},             //   ( 20)  4 - 0x0034 Digit Four
 281                  {0x27,0x45,0x45,0x45,0x39},             //   ( 21)  5 - 0x0035 Digit Five
 282                  {0x3C,0x4A,0x49,0x49,0x30},             //   ( 22)  6 - 0x0036 Digit Six
 283                  {0x01,0x71,0x09,0x05,0x03},             //   ( 23)  7 - 0x0037 Digit Seven
 284                  {0x36,0x49,0x49,0x49,0x36},             //   ( 24)  8 - 0x0038 Digit Eight
 285                  {0x06,0x49,0x49,0x29,0x1E},             //   ( 25)  9 - 0x0039 Dight Nine
 286                  {0x00,0x36,0x36,0x00,0x00},             //   ( 26)  : - 0x003A Colon
 287                  {0x00,0x56,0x36,0x00,0x00},             //   ( 27)  ; - 0x003B Semicolon
 288                  {0x08,0x14,0x22,0x41,0x00},             //   ( 28)  < - 0x003C Less-Than Sign
 289                  {0x14,0x14,0x14,0x14,0x14},             //   ( 29)  = - 0x003D Equals Sign
 290                  {0x00,0x41,0x22,0x14,0x08},             //   ( 30)  > - 0x003E Greater-Than Sign
 291                  {0x02,0x01,0x51,0x09,0x06},             //   ( 31)  ? - 0x003F Question Mark
 292                  {0x32,0x49,0x79,0x41,0x3E},             //   ( 32)  @ - 0x0040 Commercial At
 293                  {0x7E,0x11,0x11,0x11,0x7E},             //   ( 33)  A - 0x0041 Latin Capital Letter A
 294                  {0x7F,0x49,0x49,0x49,0x36},             //   ( 34)  B - 0x0042 Latin Capital Letter B
 295                  {0x3E,0x41,0x41,0x41,0x22},             //   ( 35)  C - 0x0043 Latin Capital Letter C
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 6   

 296                  {0x7F,0x41,0x41,0x22,0x1C},             //   ( 36)  D - 0x0044 Latin Capital Letter D
 297                  {0x7F,0x49,0x49,0x49,0x41},             //   ( 37)  E - 0x0045 Latin Capital Letter E
 298                  {0x7F,0x09,0x09,0x09,0x01},             //   ( 38)  F - 0x0046 Latin Capital Letter F
 299                  {0x3E,0x41,0x49,0x49,0x7A},             //   ( 39)  G - 0x0047 Latin Capital Letter G
 300                  {0x7F,0x08,0x08,0x08,0x7F},             //   ( 40)  H - 0x0048 Latin Capital Letter H
 301                  {0x00,0x41,0x7F,0x41,0x00},             //   ( 41)  I - 0x0049 Latin Capital Letter I
 302                  {0x20,0x40,0x41,0x3F,0x01},             //   ( 42)  J - 0x004A Latin Capital Letter J
 303                  {0x7F,0x08,0x14,0x22,0x41},             //   ( 43)  K - 0x004B Latin Capital Letter K
 304                  {0x7F,0x40,0x40,0x40,0x40},             //   ( 44)  L - 0x004C Latin Capital Letter L
 305                  {0x7F,0x02,0x0C,0x02,0x7F},             //   ( 45)  M - 0x004D Latin Capital Letter M
 306                  {0x7F,0x04,0x08,0x10,0x7F},             //   ( 46)  N - 0x004E Latin Capital Letter N
 307                  {0x3E,0x41,0x41,0x41,0x3E},             //   ( 47)  O - 0x004F Latin Capital Letter O
 308                  {0x7F,0x09,0x09,0x09,0x06},             //   ( 48)  P - 0x0050 Latin Capital Letter P
 309                  {0x3E,0x41,0x51,0x21,0x5E},             //   ( 49)  Q - 0x0051 Latin Capital Letter Q
 310                  {0x7F,0x09,0x19,0x29,0x46},             //   ( 50)  R - 0x0052 Latin Capital Letter R
 311                  {0x46,0x49,0x49,0x49,0x31},             //   ( 51)  S - 0x0053 Latin Capital Letter S
 312                  {0x01,0x01,0x7F,0x01,0x01},             //   ( 52)  T - 0x0054 Latin Capital Letter T
 313                  {0x3F,0x40,0x40,0x40,0x3F},             //   ( 53)  U - 0x0055 Latin Capital Letter U
 314                  {0x1F,0x20,0x40,0x20,0x1F},             //   ( 54)  V - 0x0056 Latin Capital Letter V
 315                  {0x3F,0x40,0x38,0x40,0x3F},             //   ( 55)  W - 0x0057 Latin Capital Letter W
 316                  {0x63,0x14,0x08,0x14,0x63},             //   ( 56)  X - 0x0058 Latin Capital Letter X
 317                  {0x07,0x08,0x70,0x08,0x07},             //   ( 57)  Y - 0x0059 Latin Capital Letter Y
 318                  {0x61,0x51,0x49,0x45,0x43},             //   ( 58)  Z - 0x005A Latin Capital Letter Z
 319                  {0x00,0x7F,0x41,0x41,0x00},             //   ( 59)  [ - 0x005B Left Square Bracket
 320                  {0x02,0x04,0x08,0x10,0x20},             //   ( 60)  \ - 0x005C Reverse Solidus
 321                  {0x00,0x41,0x41,0x7F,0x00},             //   ( 61)  ] - 0x005D Right Square Bracket
 322                  {0x04,0x02,0x01,0x02,0x04},             //   ( 62)  ^ - 0x005E Circumflex Accent
 323                  {0x40,0x40,0x40,0x40,0x40},             //   ( 63)  _ - 0x005F Low Line
 324                  {0x01,0x02,0x04,0x00,0x00},             //   ( 64)  ` - 0x0060 Grave Accent
 325                  {0x20,0x54,0x54,0x54,0x78},             //   ( 65)  a - 0x0061 Latin Small Letter A
 326                  {0x7F,0x48,0x44,0x44,0x38},             //   ( 66)  b - 0x0062 Latin Small Letter B
 327                  {0x38,0x44,0x44,0x44,0x20},             //   ( 67)  c - 0x0063 Latin Small Letter C
 328                  {0x38,0x44,0x44,0x48,0x7F},             //   ( 68)  d - 0x0064 Latin Small Letter D
 329                  {0x38,0x54,0x54,0x54,0x18},             //   ( 69)  e - 0x0065 Latin Small Letter E
 330                  {0x08,0x7E,0x09,0x01,0x02},             //   ( 70)  f - 0x0066 Latin Small Letter F
 331                  {0x06,0x49,0x49,0x49,0x3F},             //   ( 71)  g - 0x0067 Latin Small Letter G
 332                  {0x7F,0x08,0x04,0x04,0x78},             //   ( 72)  h - 0x0068 Latin Small Letter H
 333                  {0x00,0x44,0x7D,0x40,0x00},             //   ( 73)  i - 0x0069 Latin Small Letter I
 334                  {0x20,0x40,0x44,0x3D,0x00},             //   ( 74)  j - 0x006A Latin Small Letter J
 335                  {0x7F,0x10,0x28,0x44,0x00},             //   ( 75)  k - 0x006B Latin Small Letter K
 336                  {0x00,0x41,0x7F,0x40,0x00},             //   ( 76)  l - 0x006C Latin Small Letter L
 337                  {0x7C,0x04,0x18,0x04,0x7C},             //   ( 77)  m - 0x006D Latin Small Letter M
 338                  {0x7C,0x08,0x04,0x04,0x78},             //   ( 78)  n - 0x006E Latin Small Letter N
 339                  {0x38,0x44,0x44,0x44,0x38},             //   ( 79)  o - 0x006F Latin Small Letter O
 340                  {0x7C,0x14,0x14,0x14,0x08},             //   ( 80)  p - 0x0070 Latin Small Letter P
 341                  {0x08,0x14,0x14,0x18,0x7C},             //   ( 81)  q - 0x0071 Latin Small Letter Q
 342                  {0x7C,0x08,0x04,0x04,0x08},             //   ( 82)  r - 0x0072 Latin Small Letter R
 343                  {0x48,0x54,0x54,0x54,0x20},             //   ( 83)  s - 0x0073 Latin Small Letter S
 344                  {0x04,0x3F,0x44,0x40,0x20},             //   ( 84)  t - 0x0074 Latin Small Letter T
 345                  {0x3C,0x40,0x40,0x20,0x7C},             //   ( 85)  u - 0x0075 Latin Small Letter U
 346                  {0x1C,0x20,0x40,0x20,0x1C},             //   ( 86)  v - 0x0076 Latin Small Letter V
 347                  {0x3C,0x40,0x30,0x40,0x3C},             //   ( 87)  w - 0x0077 Latin Small Letter W
 348                  {0x44,0x28,0x10,0x28,0x44},             //   ( 88)  x - 0x0078 Latin Small Letter X
 349                  {0x0C,0x50,0x50,0x50,0x3C},             //   ( 89)  y - 0x0079 Latin Small Letter Y
 350                  {0x44,0x64,0x54,0x4C,0x44},             //   ( 90)  z - 0x007A Latin Small Letter Z
 351                  {0x00,0x08,0x36,0x41,0x00},             //   ( 91)  { - 0x007B Left Curly Bracket
 352                  {0x00,0x00,0x7F,0x00,0x00},             //   ( 92)  | - 0x007C Vertical Line
 353                  {0x00,0x41,0x36,0x08,0x00},             //   ( 93)  } - 0x007D Right Curly Bracket
 354                  {0x02,0x01,0x02,0x04,0x02},             //   ( 94)  ~ - 0x007E Tilde
 355                  {0x3E,0x55,0x55,0x41,0x22},             //   ( 95)  C - 0x0080 <Control>
 356                  {0x00,0x00,0x00,0x00,0x00},             //   ( 96)    - 0x00A0 No-Break Space
 357                  {0x00,0x00,0x79,0x00,0x00},             //   ( 97)  ! - 0x00A1 Inverted Exclamation Mark
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 7   

 358                  {0x18,0x24,0x74,0x2E,0x24},             //   ( 98)  c - 0x00A2 Cent Sign
 359                  {0x48,0x7E,0x49,0x42,0x40},             //   ( 99)  L - 0x00A3 Pound Sign
 360                  {0x5D,0x22,0x22,0x22,0x5D},             //   (100)  o - 0x00A4 Currency Sign
 361                  {0x15,0x16,0x7C,0x16,0x15},             //   (101)  Y - 0x00A5 Yen Sign
 362                  {0x00,0x00,0x77,0x00,0x00},             //   (102)  | - 0x00A6 Broken Bar
 363                  {0x0A,0x55,0x55,0x55,0x28},             //   (103)    - 0x00A7 Section Sign
 364                  {0x00,0x01,0x00,0x01,0x00},             //   (104)  " - 0x00A8 Diaeresis
 365                  {0x00,0x0A,0x0D,0x0A,0x04},             //   (105)    - 0x00AA Feminine Ordinal Indicator
 366                  {0x08,0x14,0x2A,0x14,0x22},             //   (106) << - 0x00AB Left-Pointing Double Angle Quotation Mark
 367                  {0x04,0x04,0x04,0x04,0x1C},             //   (107)    - 0x00AC Not Sign
 368                  {0x00,0x08,0x08,0x08,0x00},             //   (108)  - - 0x00AD Soft Hyphen
 369                  {0x01,0x01,0x01,0x01,0x01},             //   (109)    - 0x00AF Macron
 370                  {0x00,0x02,0x05,0x02,0x00},             //   (110)    - 0x00B0 Degree Sign
 371                  {0x44,0x44,0x5F,0x44,0x44},             //   (111) +- - 0x00B1 Plus-Minus Sign
 372                  {0x00,0x00,0x04,0x02,0x01},             //   (112)  ` - 0x00B4 Acute Accent
 373                  {0x7E,0x20,0x20,0x10,0x3E},             //   (113)  u - 0x00B5 Micro Sign
 374                  {0x06,0x0F,0x7F,0x00,0x7F},             //   (114)    - 0x00B6 Pilcrow Sign
 375                  {0x00,0x18,0x18,0x00,0x00},             //   (115)  . - 0x00B7 Middle Dot
 376                  {0x00,0x40,0x50,0x20,0x00},             //   (116)    - 0x00B8 Cedilla
 377                  {0x00,0x0A,0x0D,0x0A,0x00},             //   (117)    - 0x00BA Masculine Ordinal Indicator
 378                  {0x22,0x14,0x2A,0x14,0x08},             //   (118) >> - 0x00BB Right-Pointing Double Angle Quotation Mark
 379                  {0x17,0x08,0x34,0x2A,0x7D},             //   (119) /4 - 0x00BC Vulgar Fraction One Quarter
 380                  {0x17,0x08,0x04,0x6A,0x59},             //   (120) /2 - 0x00BD Vulgar Fraction One Half
 381                  {0x30,0x48,0x45,0x40,0x20},             //   (121)  ? - 0x00BF Inverted Question Mark
 382                  {0x70,0x29,0x26,0x28,0x70},             //   (122) `A - 0x00C0 Latin Capital Letter A with Grave
 383                  {0x70,0x28,0x26,0x29,0x70},             //   (123) 'A - 0x00C1 Latin Capital Letter A with Acute
 384                  {0x70,0x2A,0x25,0x2A,0x70},             //   (124) ^A - 0x00C2 Latin Capital Letter A with Circumflex
 385                  {0x72,0x29,0x26,0x29,0x70},             //   (125) ~A - 0x00C3 Latin Capital Letter A with Tilde
 386                  {0x70,0x29,0x24,0x29,0x70},             //   (126) "A - 0x00C4 Latin Capital Letter A with Diaeresis
 387                  {0x70,0x2A,0x2D,0x2A,0x70},             //   (127)  A - 0x00C5 Latin Capital Letter A with Ring Above
 388                  {0x7E,0x11,0x7F,0x49,0x49},             //   (128) AE - 0x00C6 Latin Capital Letter Ae
 389                  {0x0E,0x51,0x51,0x71,0x11},             //   (129)  C - 0x00C7 Latin Capital Letter C with Cedilla
 390                  {0x7C,0x55,0x56,0x54,0x44},             //   (130) `E - 0x00C8 Latin Capital Letter E with Grave
 391                  {0x7C,0x55,0x56,0x54,0x44},             //   (131) 'E - 0x00C9 Latin Capital Letter E with Acute
 392                  {0x7C,0x56,0x55,0x56,0x44},             //   (132) ^E - 0x00CA Latin Capital Letter E with Circumflex
 393                  {0x7C,0x55,0x54,0x55,0x44},             //   (133) "E - 0x00CB Latin Capital Letter E with Diaeresis
 394                  {0x00,0x45,0x7E,0x44,0x00},             //   (134) `I - 0x00CC Latin Capital Letter I with Grave
 395                  {0x00,0x44,0x7E,0x45,0x00},             //   (135) 'I - 0x00CD Latin Capital Letter I with Acute
 396                  {0x00,0x46,0x7D,0x46,0x00},             //   (136) ^I - 0x00CE Latin Capital Letter I with Circumflex
 397                  {0x00,0x45,0x7C,0x45,0x00},             //   (137) "I - 0x00CF Latin Capital Letter I with Diaeresis
 398                  {0x7F,0x49,0x49,0x41,0x3E},             //   (138)  D - 0x00D0 Latin Capital Letter Eth
 399                  {0x7C,0x0A,0x11,0x22,0x7D},             //   (139) ~N - 0x00D1 Latin Capital Letter N with Tilde
 400                  {0x38,0x45,0x46,0x44,0x38},             //   (140) `O - 0x00D2 Latin Capital Letter O with Grave
 401                  {0x38,0x44,0x46,0x45,0x38},             //   (141) 'O - 0x00D3 Latin Capital Letter O with Acute
 402                  {0x38,0x46,0x45,0x46,0x38},             //   (142) ^O - 0x00D4 Latin Capital Letter O with Circumflex
 403                  {0x38,0x46,0x45,0x46,0x39},             //   (143) ~O - 0x00D5 Latin Capital Letter O with Tilde
 404                  {0x38,0x45,0x44,0x45,0x38},             //   (144) "O - 0x00D6 Latin Capital Letter O with Diaeresis
 405                  {0x22,0x14,0x08,0x14,0x22},             //   (145)  x - 0x00D7 Multiplcation Sign
 406                  {0x2E,0x51,0x49,0x45,0x3A},             //   (146)  O - 0x00D8 Latin Capital Letter O with Stroke
 407                  {0x3C,0x41,0x42,0x40,0x3C},             //   (147) `U - 0x00D9 Latin Capital Letter U with Grave
 408                  {0x3C,0x40,0x42,0x41,0x3C},             //   (148) 'U - 0x00DA Latin Capital Letter U with Acute
 409                  {0x3C,0x42,0x41,0x42,0x3C},             //   (149) ^U - 0x00DB Latin Capital Letter U with Circumflex
 410                  {0x3C,0x41,0x40,0x41,0x3C},             //   (150) "U - 0x00DC Latin Capital Letter U with Diaeresis
 411                  {0x0C,0x10,0x62,0x11,0x0C},             //   (151) `Y - 0x00DD Latin Capital Letter Y with Acute
 412                  {0x7F,0x12,0x12,0x12,0x0C},             //   (152)  P - 0x00DE Latin Capital Letter Thom
 413                  {0x40,0x3E,0x01,0x49,0x36},             //   (153)  B - 0x00DF Latin Capital Letter Sharp S
 414                  {0x20,0x55,0x56,0x54,0x78},             //   (154) `a - 0x00E0 Latin Small Letter A with Grave
 415                  {0x20,0x54,0x56,0x55,0x78},             //   (155) 'a - 0x00E1 Latin Small Letter A with Acute
 416                  {0x20,0x56,0x55,0x56,0x78},             //   (156) ^a - 0x00E2 Latin Small Letter A with Circumflex
 417                  {0x20,0x55,0x56,0x55,0x78},             //   (157) ~a - 0x00E3 Latin Small Letter A with Tilde
 418                  {0x20,0x55,0x54,0x55,0x78},             //   (158) "a - 0x00E4 Latin Small Letter A with Diaeresis
 419                  {0x20,0x56,0x57,0x56,0x78},             //   (159)  a - 0x00E5 Latin Small Letter A with Ring Above
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 8   

 420                  {0x24,0x54,0x78,0x54,0x58},             //   (160) ae - 0x00E6 Latin Small Letter Ae
 421                  {0x0C,0x52,0x52,0x72,0x13},             //   (161)  c - 0x00E7 Latin Small Letter c with Cedilla
 422                  {0x38,0x55,0x56,0x54,0x18},             //   (162) `e - 0x00E8 Latin Small Letter E with Grave
 423                  {0x38,0x54,0x56,0x55,0x18},             //   (163) 'e - 0x00E9 Latin Small Letter E with Acute
 424                  {0x38,0x56,0x55,0x56,0x18},             //   (164) ^e - 0x00EA Latin Small Letter E with Circumflex
 425                  {0x38,0x55,0x54,0x55,0x18},             //   (165) "e - 0x00EB Latin Small Letter E with Diaeresis
 426                  {0x00,0x49,0x7A,0x40,0x00},             //   (166) `i - 0x00EC Latin Small Letter I with Grave
 427                  {0x00,0x48,0x7A,0x41,0x00},             //   (167) 'i - 0x00ED Latin Small Letter I with Acute
 428                  {0x00,0x4A,0x79,0x42,0x00},             //   (168) ^i - 0x00EE Latin Small Letter I with Circumflex
 429                  {0x00,0x4A,0x78,0x42,0x00},             //   (169) "i - 0x00EF Latin Small Letter I with Diaeresis
 430                  {0x31,0x4A,0x4E,0x4A,0x30},             //   (170)    - 0x00F0 Latin Small Letter Eth
 431                  {0x7A,0x11,0x0A,0x09,0x70},             //   (171) ~n - 0x00F1 Latin Small Letter N with Tilde
 432                  {0x30,0x49,0x4A,0x48,0x30},             //   (172) `o - 0x00F2 Latin Small Letter O with Grave
 433                  {0x30,0x48,0x4A,0x49,0x30},             //   (173) 'o - 0x00F3 Latin Small Letter O with Acute
 434                  {0x30,0x4A,0x49,0x4A,0x30},             //   (174) ^o - 0x00F4 Latin Small Letter O with Circumflex
 435                  {0x30,0x4A,0x49,0x4A,0x31},             //   (175) ~o - 0x00F5 Latin Small Letter O with Tilde
 436                  {0x30,0x4A,0x48,0x4A,0x30},             //   (176) "o - 0x00F6 Latin Small Letter O with Diaeresis
 437                  {0x08,0x08,0x2A,0x08,0x08},             //   (177)  + - 0x00F7 Division Sign
 438                  {0x38,0x64,0x54,0x4C,0x38},             //   (178)  o - 0x00F8 Latin Small Letter O with Stroke
 439                  {0x38,0x41,0x42,0x20,0x78},             //   (179) `u - 0x00F9 Latin Small Letter U with Grave
 440                  {0x38,0x40,0x42,0x21,0x78},             //   (180) 'u - 0x00FA Latin Small Letter U with Acute
 441                  {0x38,0x42,0x41,0x22,0x78},             //   (181) ^u - 0x00FB Latin Small Letter U with Circumflex
 442                  {0x38,0x42,0x40,0x22,0x78},             //   (182) "u - 0x00FC Latin Small Letter U with Diaeresis
 443                  {0x0C,0x50,0x52,0x51,0x3C},             //   (183) 'y - 0x00FD Latin Small Letter Y with Acute
 444                  {0x7E,0x14,0x14,0x14,0x08},             //   (184)  p - 0x00FE Latin Small Letter Thom
 445                  {0x0C,0x51,0x50,0x51,0x3C},             //   (185) "y - 0x00FF Latin Small Letter Y with Diaeresis
 446                  {0x1E,0x09,0x09,0x29,0x5E},             //   (186)  A - 0x0104 Latin Capital Letter A with Ogonek
 447                  {0x08,0x15,0x15,0x35,0x4E},             //   (187)  a - 0x0105 Latin Small Letter A with Ogonek
 448                  {0x38,0x44,0x46,0x45,0x20},             //   (188) 'C - 0x0106 Latin Capital Letter C with Acute
 449                  {0x30,0x48,0x4A,0x49,0x20},             //   (189) 'c - 0x0107 Latin Small Letter C with Acute
 450                  {0x38,0x45,0x46,0x45,0x20},             //   (190)  C - 0x010C Latin Capital Letter C with Caron
 451                  {0x30,0x49,0x4A,0x49,0x20},             //   (191)  c - 0x010D Latin Small Letter C with Caron
 452                  {0x7C,0x45,0x46,0x45,0x38},             //   (192)  D - 0x010E Latin Capital Letter D with Caron
 453                  {0x20,0x50,0x50,0x7C,0x03},             //   (193) d' - 0x010F Latin Small Letter D with Caron
 454                  {0x1F,0x15,0x15,0x35,0x51},             //   (194)  E - 0x0118 Latin Capital Letter E with Ogonek
 455                  {0x0E,0x15,0x15,0x35,0x46},             //   (195)  e - 0x0119 Latin Small Letter E with Ogonek
 456                  {0x7C,0x55,0x56,0x55,0x44},             //   (196)  E - 0x011A Latin Capital Letter E with Caron
 457                  {0x38,0x55,0x56,0x55,0x18},             //   (197)  e - 0x011B Latin Small Letter E with Caron
 458                  {0x00,0x44,0x7C,0x40,0x00},             //   (198)  i - 0x0131 Latin Small Letter Dotless I
 459                  {0x7F,0x48,0x44,0x40,0x40},             //   (199)  L - 0x0141 Latin Capital Letter L with Stroke
 460                  {0x00,0x49,0x7F,0x44,0x00},             //   (200)  l - 0x0142 Latin Small Letter L with Stroke
 461                  {0x7C,0x08,0x12,0x21,0x7C},             //   (201) 'N - 0x0143 Latin Capital Letter N with Acute
 462                  {0x78,0x10,0x0A,0x09,0x70},             //   (202) 'n - 0x0144 Latin Small Letter N with Acute
 463                  {0x7C,0x09,0x12,0x21,0x7C},             //   (203)  N - 0x0147 Latin Capital Letter N with Caron
 464                  {0x78,0x11,0x0A,0x09,0x70},             //   (204)  n - 0x0148 Latin Small Letter N with Caron
 465                  {0x38,0x47,0x44,0x47,0x38},             //   (205) "O - 0x0150 Latin Capital Letter O with Double Acute
 466                  {0x30,0x4B,0x48,0x4B,0x30},             //   (206) "o - 0x0151 Latin Small Letter O with Double Acute
 467                  {0x3E,0x41,0x7F,0x49,0x49},             //   (207) OE - 0x0152 Latin Capital Ligature Oe
 468                  {0x38,0x44,0x38,0x54,0x58},             //   (208) oe - 0x0153 Latin Small Ligature Oe
 469                  {0x7C,0x15,0x16,0x35,0x48},             //   (209)  R - 0x0158 Latin Capital Letter R with Caron
 470                  {0x78,0x11,0x0A,0x09,0x10},             //   (210)  r - 0x0159 Latin Small Letter R with Caron
 471                  {0x48,0x54,0x56,0x55,0x20},             //   (211) 'S - 0x015A Latin Capital Letter S with Acute
 472                  {0x20,0x48,0x56,0x55,0x20},             //   (212) 's - 0x015B Latin Small Letter S with Acute
 473                  {0x48,0x55,0x56,0x55,0x20},             //   (213)  S - 0x0160 Latin Capital Letter S with Caron
 474                  {0x20,0x49,0x56,0x55,0x20},             //   (214)  s - 0x0161 Latin Small Letter S with Caron
 475                  {0x04,0x05,0x7E,0x05,0x04},             //   (215)  T - 0x0164 Latin Capital Letter T with Caron
 476                  {0x08,0x3C,0x48,0x22,0x01},             //   (216) t' - 0x0165 Latin Small Letter T with Caron
 477                  {0x3C,0x42,0x45,0x42,0x3C},             //   (217)  U - 0x016E Latin Capital Letter U with Ring Above
 478                  {0x38,0x42,0x45,0x22,0x78},             //   (218)  u - 0x016F Latin Small Letter U with Ring Above
 479                  {0x3C,0x43,0x40,0x43,0x3C},             //   (219) "U - 0x0170 Latin Capital Letter U with Double Acute
 480                  {0x38,0x43,0x40,0x23,0x78},             //   (220) "u - 0x0171 Latin Small Letter U with Double Acute
 481                  {0x0C,0x11,0x60,0x11,0x0C},             //   (221) "Y - 0x0178 Latin Capital Letter Y with Diaeresis
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 9   

 482                  {0x44,0x66,0x55,0x4C,0x44},             //   (222) 'Z - 0x0179 Latin Capital Letter Z with Acute
 483                  {0x48,0x6A,0x59,0x48,0x00},             //   (223) 'z - 0x017A Latin Small Letter Z with Acute
 484                  {0x44,0x64,0x55,0x4C,0x44},             //   (224)  Z - 0x017B Latin Capital Letter Z with Dot Above
 485                  {0x48,0x68,0x5A,0x48,0x00},             //   (225)  z - 0x017C Latin Small Letter Z with Dot Above
 486                  {0x44,0x65,0x56,0x4D,0x44},             //   (226)  Z - 0x017D Latin Capital Letter Z with Caron
 487                  {0x48,0x69,0x5A,0x49,0x00},             //   (227)  z - 0x017E Latin Small Letter Z with Caron
 488                  {0x00,0x02,0x01,0x02,0x00},             //   (228)  ^ - 0x02C6 Modifier Letter Circumflex Accent
 489                  {0x00,0x01,0x02,0x01,0x00},             //   (229)    - 0x02C7 Caron
 490                  {0x00,0x01,0x01,0x01,0x00},             //   (230)    - 0x02C9 Modifier Letter Macron
 491                  {0x01,0x02,0x02,0x01,0x00},             //   (231)    - 0x02D8 Breve
 492                  {0x00,0x00,0x01,0x00,0x00},             //   (232)    - 0x02D9 Dot Above
 493                  {0x00,0x02,0x05,0x02,0x00},             //   (233)    - 0x02DA Ring Above
 494                  {0x02,0x01,0x02,0x01,0x00},             //   (234)  ~ - 0x02DC Small Tilde
 495                  {0x7F,0x05,0x15,0x3A,0x50},             //   (235) Pt - 0x20A7 Peseta Sign
 496                  {0x3E,0x55,0x55,0x41,0x22},             //   (236)  C - 0x20AC Euro Sign
 497                  {0x18,0x14,0x08,0x14,0x0C},             //   (237)    - 0x221E Infinity
 498                  {0x44,0x4A,0x4A,0x51,0x51},             //   (238)  < - 0x2264 Less-Than or Equal to
 499                  {0x51,0x51,0x4A,0x4A,0x44},             //   (239)  > - 0x2265 Greater-Than or Equal to
 500                  {0x74,0x42,0x41,0x42,0x74},             //   (240)    - 0x2302 House
 501          };
 502          
 503          
 504          unsigned char code Ascii_2[107][5]={            // Refer to "Times New Roman" Font Database...
 505                                                          //   Greek & Japanese Letters
 506                  {0x7E,0x11,0x11,0x11,0x7E},             //   (  1)  A - 0x0391 Greek Capital Letter Alpha
 507                  {0x7F,0x49,0x49,0x49,0x36},             //   (  2)  B - 0x0392 Greek Capital Letter Beta
 508                  {0x7F,0x02,0x01,0x01,0x03},             //   (  3)    - 0x0393 Greek Capital Letter Gamma
 509                  {0x70,0x4E,0x41,0x4E,0x70},             //   (  4)    - 0x0394 Greek Capital Letter Delta
 510                  {0x7F,0x49,0x49,0x49,0x41},             //   (  5)  E - 0x0395 Greek Capital Letter Epsilon
 511                  {0x61,0x51,0x49,0x45,0x43},             //   (  6)  Z - 0x0396 Greek Capital Letter Zeta
 512                  {0x7F,0x08,0x08,0x08,0x7F},             //   (  7)  H - 0x0397 Greek Capital Letter Eta
 513                  {0x3E,0x49,0x49,0x49,0x3E},             //   (  8)    - 0x0398 Greek Capital Letter Theta
 514                  {0x00,0x41,0x7F,0x41,0x00},             //   (  9)  I - 0x0399 Greek Capital Letter Iota
 515                  {0x7F,0x08,0x14,0x22,0x41},             //   ( 10)  K - 0x039A Greek Capital Letter Kappa
 516                  {0x70,0x0E,0x01,0x0E,0x70},             //   ( 11)    - 0x039B Greek Capital Letter Lamda
 517                  {0x7F,0x02,0x0C,0x02,0x7F},             //   ( 12)  M - 0x039C Greek Capital Letter Mu
 518                  {0x7F,0x04,0x08,0x10,0x7F},             //   ( 13)  N - 0x039D Greek Capital Letter Nu
 519                  {0x63,0x5D,0x49,0x5D,0x63},             //   ( 14)    - 0x039E Greek Capital Letter Xi
 520                  {0x3E,0x41,0x41,0x41,0x3E},             //   ( 15)  O - 0x039F Greek Capital Letter Omicron
 521                  {0x41,0x3F,0x01,0x3F,0x41},             //   ( 16)    - 0x03A0 Greek Capital Letter Pi
 522                  {0x7F,0x09,0x09,0x09,0x06},             //   ( 17)  P - 0x03A1 Greek Capital Letter Rho
 523                  {0x63,0x55,0x49,0x41,0x41},             //   ( 18)    - 0x03A3 Greek Capital Letter Sigma
 524                  {0x01,0x01,0x7F,0x01,0x01},             //   ( 19)  T - 0x03A4 Greek Capital Letter Tau
 525                  {0x03,0x01,0x7E,0x01,0x03},             //   ( 20)    - 0x03A5 Greek Capital Letter Upsilon
 526                  {0x08,0x55,0x7F,0x55,0x08},             //   ( 21)    - 0x03A6 Greek Capital Letter Phi
 527                  {0x63,0x14,0x08,0x14,0x63},             //   ( 22)  X - 0x03A7 Greek Capital Letter Chi
 528                  {0x07,0x48,0x7F,0x48,0x07},             //   ( 23)    - 0x03A8 Greek Capital Letter Psi
 529                  {0x5E,0x61,0x01,0x61,0x5E},             //   ( 24)    - 0x03A9 Greek Capital Letter Omega
 530                  {0x38,0x44,0x48,0x30,0x4C},             //   ( 25)  a - 0x03B1 Greek Small Letter Alpha
 531                  {0x7C,0x2A,0x2A,0x2A,0x14},             //   ( 26)  B - 0x03B2 Greek Small Letter Beta
 532                  {0x44,0x38,0x04,0x04,0x08},             //   ( 27)  r - 0x03B3 Greek Small Letter Gamma
 533                  {0x30,0x4B,0x4D,0x59,0x30},             //   ( 28)    - 0x03B4 Greek Small Letter Delta
 534                  {0x28,0x54,0x54,0x44,0x20},             //   ( 29)    - 0x03B5 Greek Small Letter Epsilon
 535                  {0x00,0x18,0x55,0x52,0x22},             //   ( 30)    - 0x03B6 Greek Small Letter Zeta
 536                  {0x3E,0x04,0x02,0x02,0x7C},             //   ( 31)  n - 0x03B7 Greek Small Letter Eta
 537                  {0x3C,0x4A,0x4A,0x4A,0x3C},             //   ( 32)    - 0x03B8 Greek Small Letter Theta
 538                  {0x00,0x3C,0x40,0x20,0x00},             //   ( 33)  i - 0x03B9 Greek Small Letter Iota
 539                  {0x7C,0x10,0x28,0x44,0x40},             //   ( 34)  k - 0x03BA Greek Small Letter Kappa
 540                  {0x41,0x32,0x0C,0x30,0x40},             //   ( 35)    - 0x03BB Greek Small Letter Lamda
 541                  {0x7E,0x20,0x20,0x10,0x3E},             //   ( 36)  u - 0x03BC Greek Small Letter Mu
 542                  {0x1C,0x20,0x40,0x20,0x1C},             //   ( 37)  v - 0x03BD Greek Small Letter Nu
 543                  {0x14,0x2B,0x2A,0x2A,0x60},             //   ( 38)    - 0x03BE Greek Small Letter Xi
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 10  

 544                  {0x38,0x44,0x44,0x44,0x38},             //   ( 39)  o - 0x03BF Greek Small Letter Omicron
 545                  {0x44,0x3C,0x04,0x7C,0x44},             //   ( 40)    - 0x03C0 Greek Small Letter Pi
 546                  {0x70,0x28,0x24,0x24,0x18},             //   ( 41)  p - 0x03C1 Greek Small Letter Rho
 547                  {0x0C,0x12,0x12,0x52,0x60},             //   ( 42)    - 0x03C2 Greek Small Letter Final Sigma
 548                  {0x38,0x44,0x4C,0x54,0x24},             //   ( 43)    - 0x03C3 Greek Small Letter Sigma
 549                  {0x04,0x3C,0x44,0x20,0x00},             //   ( 44)  t - 0x03C4 Greek Small Letter Tau
 550                  {0x3C,0x40,0x40,0x20,0x1C},             //   ( 45)  v - 0x03C5 Greek Small Letter Upsilon
 551                  {0x18,0x24,0x7E,0x24,0x18},             //   ( 46)    - 0x03C6 Greek Small Letter Phi
 552                  {0x44,0x28,0x10,0x28,0x44},             //   ( 47)  x - 0x03C7 Greek Small Letter Chi
 553                  {0x0C,0x10,0x7E,0x10,0x0C},             //   ( 48)    - 0x03C8 Greek Small Letter Psi
 554                  {0x38,0x44,0x30,0x44,0x38},             //   ( 49)  w - 0x03C9 Greek Small Letter Omega
 555                  {0x0A,0x0A,0x4A,0x2A,0x1E},             //   ( 50)    - 0xFF66 Katakana Letter Wo
 556                  {0x04,0x44,0x34,0x14,0x0C},             //   ( 51)    - 0xFF67 Katakana Letter Small A
 557                  {0x20,0x10,0x78,0x04,0x00},             //   ( 52)    - 0xFF68 Katakana Letter Small I
 558                  {0x18,0x08,0x4C,0x48,0x38},             //   ( 53)    - 0xFF69 Katakana Letter Small U
 559                  {0x48,0x48,0x78,0x48,0x48},             //   ( 54)    - 0xFF6A Katakana Letter Small E
 560                  {0x48,0x28,0x18,0x7C,0x08},             //   ( 55)    - 0xFF6B Katakana Letter Small O
 561                  {0x08,0x7C,0x08,0x28,0x18},             //   ( 56)    - 0xFF6C Katakana Letter Small Ya
 562                  {0x40,0x48,0x48,0x78,0x40},             //   ( 57)    - 0xFF6D Katakana Letter Small Yu
 563                  {0x54,0x54,0x54,0x7C,0x00},             //   ( 58)    - 0xFF6E Katakana Letter Small Yo
 564                  {0x18,0x00,0x58,0x40,0x38},             //   ( 59)    - 0xFF6F Katakana Letter Small Tu
 565                  {0x08,0x08,0x08,0x08,0x08},             //   ( 60)    - 0xFF70 Katakana-Hiragana Prolonged Sound Mark
 566                  {0x01,0x41,0x3D,0x09,0x07},             //   ( 61)    - 0xFF71 Katakana Letter A
 567                  {0x10,0x08,0x7C,0x02,0x01},             //   ( 62)    - 0xFF72 Katakana Letter I
 568                  {0x0E,0x02,0x43,0x22,0x1E},             //   ( 63)    - 0xFF73 Katakana Letter U
 569                  {0x42,0x42,0x7E,0x42,0x42},             //   ( 64)    - 0xFF74 Katakana Letter E
 570                  {0x22,0x12,0x0A,0x7F,0x02},             //   ( 65)    - 0xFF75 Katakana Letter O
 571                  {0x42,0x3F,0x02,0x42,0x3E},             //   ( 66)    - 0xFF76 Katakana Letter Ka
 572                  {0x0A,0x0A,0x7F,0x0A,0x0A},             //   ( 67)    - 0xFF77 Katakana Letter Ki
 573                  {0x08,0x46,0x42,0x22,0x1E},             //   ( 68)    - 0xFF78 Katakana Letter Ku
 574                  {0x04,0x03,0x42,0x3E,0x02},             //   ( 69)    - 0xFF79 Katakana Letter Ke
 575                  {0x42,0x42,0x42,0x42,0x7E},             //   ( 70)    - 0xFF7A Katakana Letter Ko
 576                  {0x02,0x4F,0x22,0x1F,0x02},             //   ( 71)    - 0xFF7B Katakana Letter Sa
 577                  {0x4A,0x4A,0x40,0x20,0x1C},             //   ( 72)    - 0xFF7C Katakana Letter Shi
 578                  {0x42,0x22,0x12,0x2A,0x46},             //   ( 73)    - 0xFF7D Katakana Letter Su
 579                  {0x02,0x3F,0x42,0x4A,0x46},             //   ( 74)    - 0xFF7E Katakana Letter Se
 580                  {0x06,0x48,0x40,0x20,0x1E},             //   ( 75)    - 0xFF7F Katakana Letter So
 581                  {0x08,0x46,0x4A,0x32,0x1E},             //   ( 76)    - 0xFF80 Katakana Letter Ta
 582                  {0x0A,0x4A,0x3E,0x09,0x08},             //   ( 77)    - 0xFF81 Katakana Letter Chi
 583                  {0x0E,0x00,0x4E,0x20,0x1E},             //   ( 78)    - 0xFF82 Katakana Letter Tsu
 584                  {0x04,0x45,0x3D,0x05,0x04},             //   ( 79)    - 0xFF83 Katakana Letter Te
 585                  {0x00,0x7F,0x08,0x10,0x00},             //   ( 80)    - 0xFF84 Katakana Letter To
 586                  {0x44,0x24,0x1F,0x04,0x04},             //   ( 81)    - 0xFF85 Katakana Letter Na
 587                  {0x40,0x42,0x42,0x42,0x40},             //   ( 82)    - 0xFF86 Katakana Letter Ni
 588                  {0x42,0x2A,0x12,0x2A,0x06},             //   ( 83)    - 0xFF87 Katakana Letter Nu
 589                  {0x22,0x12,0x7B,0x16,0x22},             //   ( 84)    - 0xFF88 Katakana Letter Ne
 590                  {0x00,0x40,0x20,0x1F,0x00},             //   ( 85)    - 0xFF89 Katakana Letter No
 591                  {0x78,0x00,0x02,0x04,0x78},             //   ( 86)    - 0xFF8A Katakana Letter Ha
 592                  {0x3F,0x44,0x44,0x44,0x44},             //   ( 87)    - 0xFF8B Katakana Letter Hi
 593                  {0x02,0x42,0x42,0x22,0x1E},             //   ( 88)    - 0xFF8C Katakana Letter Fu
 594                  {0x04,0x02,0x04,0x08,0x30},             //   ( 89)    - 0xFF8D Katakana Letter He
 595                  {0x32,0x02,0x7F,0x02,0x32},             //   ( 90)    - 0xFF8E Katakana Letter Ho
 596                  {0x02,0x12,0x22,0x52,0x0E},             //   ( 91)    - 0xFF8F Katakana Letter Ma
 597                  {0x00,0x2A,0x2A,0x2A,0x40},             //   ( 92)    - 0xFF90 Katakana Letter Mi
 598                  {0x38,0x24,0x22,0x20,0x70},             //   ( 93)    - 0xFF91 Katakana Letter Mu
 599                  {0x40,0x28,0x10,0x28,0x06},             //   ( 94)    - 0xFF92 Katakana Letter Me
 600                  {0x0A,0x3E,0x4A,0x4A,0x4A},             //   ( 95)    - 0xFF93 Katakana Letter Mo
 601                  {0x04,0x7F,0x04,0x14,0x0C},             //   ( 96)    - 0xFF94 Katakana Letter Ya
 602                  {0x40,0x42,0x42,0x7E,0x40},             //   ( 97)    - 0xFF95 Katakana Letter Yu
 603                  {0x4A,0x4A,0x4A,0x4A,0x7E},             //   ( 98)    - 0xFF96 Katakana Letter Yo
 604                  {0x04,0x05,0x45,0x25,0x1C},             //   ( 99)    - 0xFF97 Katakana Letter Ra
 605                  {0x0F,0x40,0x20,0x1F,0x00},             //   (100)    - 0xFF98 Katakana Letter Ri
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 11  

 606                  {0x7C,0x00,0x7E,0x40,0x30},             //   (101)    - 0xFF99 Katakana Letter Ru
 607                  {0x7E,0x40,0x20,0x10,0x08},             //   (102)    - 0xFF9A Katakana Letter Re
 608                  {0x7E,0x42,0x42,0x42,0x7E},             //   (103)    - 0xFF9B Katakana Letter Ro
 609                  {0x0E,0x02,0x42,0x22,0x1E},             //   (104)    - 0xFF9C Katakana Letter Wa
 610                  {0x42,0x42,0x40,0x20,0x18},             //   (105)    - 0xFF9D Katakana Letter N
 611                  {0x02,0x04,0x01,0x02,0x00},             //   (106)    - 0xFF9E Katakana Voiced Sound Mark
 612                  {0x07,0x05,0x07,0x00,0x00},             //   (107)    - 0xFF9F Katakana Semi-Voiced Sound Mark
 613          };
 614          
 615          
 616          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 617          //  Show Regular Pattern (Full Screen)
 618          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 619          void Fill_RAM(unsigned char Data)
 620          {
 621   1      unsigned char i,j;
 622   1      
 623   1              for(i=0;i<8;i++)
 624   1              {
 625   2                      Set_Start_Page(i);
 626   2                      Set_Start_Column(0x00);
 627   2      
 628   2                      for(j=0;j<128;j++)
 629   2                      {
 630   3                              Write_Data(Data);
 631   3                      }
 632   2              }
 633   1      }
 634          
 635          
 636          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 637          //  Show Regular Pattern (Partial or Full Screen)
 638          //
 639          //    a: Start Page
 640          //    b: End Page
 641          //    c: Start Column
 642          //    d: Total Columns
 643          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 644          void Fill_Block(unsigned char Data, unsigned char a, unsigned char b, unsigned char c, unsigned char d)
 645          {
 646   1      unsigned char i,j;
 647   1              
 648   1              for(i=a;i<(b+1);i++)
 649   1              {
 650   2                      Set_Start_Page(i);
 651   2                      Set_Start_Column(c);
 652   2      
 653   2                      for(j=0;j<d;j++)
 654   2                      {
 655   3                              Write_Data(Data);
 656   3                      }
 657   2              }
 658   1      }
 659          
 660          
 661          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 662          //  Show Checkboard (Full Screen)
 663          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 664          void Checkerboard()
 665          {
 666   1      unsigned char i,j;
 667   1              
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 12  

 668   1              for(i=0;i<8;i++)
 669   1              {
 670   2                      Set_Start_Page(i);
 671   2                      Set_Start_Column(0x00);
 672   2      
 673   2                      for(j=0;j<64;j++)
 674   2                      {
 675   3                              Write_Data(0x55);
 676   3                              Write_Data(0xaa);
 677   3                      }
 678   2              }
 679   1      }
 680          
 681          
 682          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 683          //  Show Frame (Full Screen)
 684          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 685          void Frame()
 686          {
 687   1      unsigned char i,j;
 688   1              
 689   1              Set_Start_Page(0x00);
 690   1              Set_Start_Column(XLevel);
 691   1      
 692   1              for(i=0;i<Max_Column;i++)
 693   1              {
 694   2                      Write_Data(0x01);
 695   2              }
 696   1      
 697   1              Set_Start_Page(0x07);
 698   1              Set_Start_Column(XLevel);
 699   1      
 700   1              for(i=0;i<Max_Column;i++)
 701   1              {
 702   2                      Write_Data(0x80);
 703   2              }
 704   1      
 705   1              for(i=0;i<8;i++)
 706   1              {
 707   2                      Set_Start_Page(i);
 708   2      
 709   2                      for(j=0;j<Max_Column;j+=(Max_Column-1))
 710   2                      {
 711   3                              Set_Start_Column(XLevel+j);
 712   3      
 713   3                              Write_Data(0xFF);
 714   3                      }
 715   2              }
 716   1      }
 717          
 718          
 719          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 720          //  Show Character (5x7)
 721          //
 722          //    a: Database
 723          //    b: Ascii
 724          //    c: Start Page
 725          //    d: Start Column
 726          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 727          void Show_Font57(unsigned char a, unsigned char b, unsigned char c, unsigned char d)
 728          {
 729   1      unsigned char *Src_Pointer;
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 13  

 730   1      unsigned char i;
 731   1      
 732   1              switch(a)
 733   1              {
 734   2                      case 1:
 735   2                              Src_Pointer=&Ascii_1[(b-1)][0];
 736   2                              break;
 737   2                      case 2:
 738   2                              Src_Pointer=&Ascii_2[(b-1)][0];
 739   2                              break;
 740   2              }
 741   1              Set_Start_Page(c);
 742   1              Set_Start_Column(d);
 743   1      
 744   1              for(i=0;i<5;i++)
 745   1              {
 746   2                      Write_Data(*Src_Pointer);
 747   2                      Src_Pointer++;
 748   2              }
 749   1              Write_Data(0x00);
 750   1      }
 751          
 752          
 753          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 754          //  Show String
 755          //
 756          //    a: Database
 757          //    b: Start Page
 758          //    c: Start Column
 759          //    * Must write "0" in the end...
 760          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 761          void Show_String(unsigned char a, unsigned char *Data_Pointer, unsigned char b, unsigned char c)
 762          {
 763   1      unsigned char *Src_Pointer;
 764   1      
 765   1              Src_Pointer=Data_Pointer;
 766   1              Show_Font57(1,96,b,c);                  // No-Break Space
 767   1                                                      //   Must be written first before the string start...
 768   1      
 769   1              while(1)
 770   1              {
 771   2                      Show_Font57(a,*Src_Pointer,b,c);
 772   2                      Src_Pointer++;
 773   2                      c+=6;
 774   2                      if(*Src_Pointer == 0) break;
 775   2              }
 776   1      }
 777          
 778          
 779          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 780          //  Show Pattern (Partial or Full Screen)
 781          //
 782          //    a: Start Page
 783          //    b: End Page
 784          //    c: Start Column
 785          //    d: Total Columns
 786          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 787          void Show_Pattern(unsigned char *Data_Pointer, unsigned char a, unsigned char b, unsigned char c, unsigned
             - char d)
 788          {
 789   1      unsigned char *Src_Pointer;
 790   1      unsigned char i,j;
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 14  

 791   1      
 792   1              Src_Pointer=Data_Pointer;
 793   1              for(i=a;i<(b+1);i++)
 794   1              {
 795   2                      Set_Start_Page(i);
 796   2                      Set_Start_Column(c);
 797   2      
 798   2                      for(j=0;j<d;j++)
 799   2                      {
 800   3                              Write_Data(*Src_Pointer);
 801   3                              Src_Pointer++;
 802   3                      }
 803   2              }
 804   1      }
 805          
 806          
 807          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 808          //  Vertical / Fade Scrolling (Partial or Full Screen)
 809          //
 810          //    a: Scrolling Direction
 811          //       "0x00" (Upward)
 812          //       "0x01" (Downward)
 813          //    b: Set Top Fixed Area
 814          //    c: Set Vertical Scroll Area
 815          //    d: Set Numbers of Row Scroll per Step
 816          //    e: Set Time Interval between Each Scroll Step
 817          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 818          void Vertical_Scroll(unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned char e)
 819          {
 820   1      unsigned int i,j;       
 821   1      
 822   1              Write_Command(0xA3);                    // Set Vertical Scroll Area
 823   1              Write_Command(b);                       //   Default => 0x00 (Top Fixed Area)
 824   1              Write_Command(c);                       //   Default => 0x40 (Vertical Scroll Area)
 825   1      
 826   1              switch(a)
 827   1              {
 828   2                      case 0:
 829   2                              for(i=0;i<c;i+=d)
 830   2                              {
 831   3                                      Set_Start_Line(i);
 832   3                                      for(j=0;j<e;j++)
 833   3                                      {
 834   4                                              uDelay(200);
 835   4                                      }
 836   3                              }
 837   2                              break;
 838   2                      case 1:
 839   2                              for(i=0;i<c;i+=d)
 840   2                              {
 841   3                                      Set_Start_Line(c-i);
 842   3                                      for(j=0;j<e;j++)
 843   3                                      {
 844   4                                              uDelay(200);
 845   4                                      }
 846   3                              }
 847   2                              break;
 848   2              }
 849   1              Set_Start_Line(0x00);
 850   1      }
 851          
 852          
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 15  

 853          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 854          //  Continuous Horizontal Scrolling (Partial or Full Screen)
 855          //
 856          //    a: Scrolling Direction
 857          //       "0x00" (Rightward)
 858          //       "0x01" (Leftward)
 859          //    b: Define Start Page Address
 860          //    c: Define End Page Address
 861          //    d: Set Time Interval between Each Scroll Step in Terms of Frame Frequency
 862          //    e: Delay Time
 863          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 864          void Horizontal_Scroll(unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned char e
             -)
 865          {
 866   1              Write_Command(0x26|a);                  // Horizontal Scroll Setup
 867   1              Write_Command(0x00);                    //           => (Dummy Write for First Parameter)
 868   1              Write_Command(b);
 869   1              Write_Command(d);
 870   1              Write_Command(c);
 871   1              Write_Command(0x2F);                    // Activate Scrolling
 872   1              Delay(e);
 873   1      }
 874          
 875          
 876          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 877          //  Continuous Vertical / Horizontal / Diagonal Scrolling (Partial or Full Screen)
 878          //
 879          //    a: Scrolling Direction
 880          //       "0x00" (Vertical & Rightward)
 881          //       "0x01" (Vertical & Leftward)
 882          //    b: Define Start Row Address (Horizontal / Diagonal Scrolling)
 883          //    c: Define End Page Address (Horizontal / Diagonal Scrolling)
 884          //    d: Set Top Fixed Area (Vertical Scrolling)
 885          //    e: Set Vertical Scroll Area (Vertical Scrolling)
 886          //    f: Set Numbers of Row Scroll per Step (Vertical / Diagonal Scrolling)
 887          //    g: Set Time Interval between Each Scroll Step in Terms of Frame Frequency
 888          //    h: Delay Time
 889          //    * d+e must be less than or equal to the Multiplex Ratio...
 890          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 891          void Continuous_Scroll(unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned char e
             -, unsigned char f, unsigned char g, unsigned char h)
 892          {
 893   1              Write_Command(0xA3);                    // Set Vertical Scroll Area
 894   1              Write_Command(d);                       //   Default => 0x00 (Top Fixed Area)
 895   1              Write_Command(e);                       //   Default => 0x40 (Vertical Scroll Area)
 896   1      
 897   1              Write_Command(0x29+a);                  // Continuous Vertical & Horizontal Scroll Setup
 898   1              Write_Command(0x00);                    //           => (Dummy Write for First Parameter)
 899   1              Write_Command(b);
 900   1              Write_Command(g);
 901   1              Write_Command(c);
 902   1              Write_Command(f);
 903   1              Write_Command(0x2F);                    // Activate Scrolling
 904   1              Delay(h);
 905   1      }
 906          
 907          
 908          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 909          //  Deactivate Scrolling (Full Screen)
 910          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 911          void Deactivate_Scroll()
 912          {
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 16  

 913   1              Write_Command(0x2E);                    // Deactivate Scrolling
 914   1      }
 915          
 916          
 917          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 918          //  Fade In (Full Screen)
 919          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 920          void Fade_In()
 921          {
 922   1      unsigned int i; 
 923   1      
 924   1              Set_Display_On_Off(0x01);
 925   1              for(i=0;i<(Brightness+1);i++)
 926   1              {
 927   2                      Set_Contrast_Control(i);
 928   2                      uDelay(200);
 929   2                      uDelay(200);
 930   2                      uDelay(200);
 931   2              }
 932   1      }
 933          
 934          
 935          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 936          //  Fade Out (Full Screen)
 937          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 938          void Fade_Out()
 939          {
 940   1      unsigned int i; 
 941   1      
 942   1              for(i=(Brightness+1);i>0;i--)
 943   1              {
 944   2                      Set_Contrast_Control(i-1);
 945   2                      uDelay(200);
 946   2                      uDelay(200);
 947   2                      uDelay(200);
 948   2              }
 949   1              Set_Display_On_Off(0x00);
 950   1      }
 951          
 952          
 953          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 954          //  Sleep Mode
 955          //
 956          //    "0x00" Enter Sleep Mode
 957          //    "0x01" Exit Sleep Mode
 958          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 959          void Sleep(unsigned char a)
 960          {
 961   1              switch(a)
 962   1              {
 963   2                      case 0:
 964   2                              Set_Display_On_Off(0x00);
 965   2                              Set_Entire_Display(0x01);
 966   2                              break;
 967   2                      case 1:
 968   2                              Set_Entire_Display(0x00);
 969   2                              Set_Display_On_Off(0x01);
 970   2                              break;
 971   2              }
 972   1      }
 973          
 974          
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 17  

 975          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 976          //  Connection Test
 977          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 978          void Test()
 979          {
 980   1      unsigned char i;
 981   1      
 982   1              RES=0;
 983   1              for(i=0;i<200;i++)
 984   1              {
 985   2                      uDelay(200);
 986   2              }
 987   1              RES=1;
 988   1      
 989   1              Set_Entire_Display(0x01);               // Enable Entire Display On (0x00/0x01)
 990   1      
 991   1              while(1)
 992   1              {
 993   2                      Set_Display_On_Off(0x01);       // Display On (0x00/0x01)
 994   2                      Delay(2);
 995   2                      Set_Display_On_Off(0x00);       // Display Off (0x00/0x01)
 996   2                      Delay(2);
 997   2              }
 998   1      }
 999          
1000          
1001          
1002          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1003          //  Initialization
1004          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1005          void OLED_Init_E()                              // VCC Supplied Externally
1006          {
1007   1      unsigned char i;
1008   1      
1009   1              RES=0;
1010   1              for(i=0;i<200;i++)
1011   1              {
1012   2                      uDelay(200);
1013   2              }
1014   1              RES=1;
1015   1      
1016   1              Set_Display_On_Off(0x00);               // Display Off (0x00/0x01)
1017   1              Set_Display_Clock(0x80);                // Set Clock as 100 Frames/Sec
1018   1              Set_Multiplex_Ratio(0x3F);              // 1/64 Duty (0x0F~0x3F)
1019   1              Set_Display_Offset(0x00);               // Shift Mapping RAM Counter (0x00~0x3F)
1020   1              Set_Start_Line(0x00);                   // Set Mapping RAM Display Start Line (0x00~0x3F)
1021   1              Set_Charge_Pump(0x00);                  // Disable Embedded DC/DC Converter (0x00/0x04)
1022   1              Set_Addressing_Mode(0x02);              // Set Page Addressing Mode (0x00/0x01/0x02)
1023   1              Set_Segment_Remap(0x01);                // Set SEG/Column Mapping (0x00/0x01)
1024   1              Set_Common_Remap(0x08);                 // Set COM/Row Scan Direction (0x00/0x08)
1025   1              Set_Common_Config(0x10);                // Set Sequential Configuration (0x00/0x10)
1026   1              Set_Contrast_Control(Brightness);       // Set SEG Output Current
1027   1              Set_Precharge_Period(0x22);             // Set Pre-Charge as 2 Clocks & Discharge as 2 Clock
1028   1              Set_VCOMH(0x40);                        // Set VCOM Deselect Level
1029   1              Set_Entire_Display(0x00);               // Disable Entire Display On (0x00/0x01)
1030   1              Set_Inverse_Display(0x00);              // Disable Inverse Display On (0x00/0x01)
1031   1      
1032   1              Fill_RAM(0x00);                         // Clear Screen
1033   1      
1034   1              Set_Display_On_Off(0x01);               // Display On (0x00/0x01)
1035   1      }
1036          
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 18  

1037          
1038          void OLED_Init_I()                              // VCC Generated by Internal DC/DC Circuit
1039          {
1040   1      unsigned char i;
1041   1      
1042   1              RES=0;
1043   1              for(i=0;i<200;i++)
1044   1              {
1045   2                      uDelay(200);
1046   2                      //uDelay(200);
1047   2              }
1048   1              RES=1;
1049   1      
1050   1              Set_Display_On_Off(0x00);               // Display Off (0x00/0x01)
1051   1              Set_Display_Clock(0x80);                // Set Clock as 100 Frames/Sec
1052   1              Set_Multiplex_Ratio(0x3F);              // 1/64 Duty (0x0F~0x3F)
1053   1              Set_Display_Offset(0x00);               // Shift Mapping RAM Counter (0x00~0x3F)
1054   1              Set_Start_Line(0x00);                   // Set Mapping RAM Display Start Line (0x00~0x3F)
1055   1              Set_Charge_Pump(0x04);                  // Enable Embedded DC/DC Converter (0x00/0x04)
1056   1              Set_Addressing_Mode(0x02);              // Set Page Addressing Mode (0x00/0x01/0x02)
1057   1              Set_Segment_Remap(0x01);                // Set SEG/Column Mapping (0x00/0x01)
1058   1              Set_Common_Remap(0x08);                 // Set COM/Row Scan Direction (0x00/0x08)
1059   1              Set_Common_Config(0x10);                // Set Sequential Configuration (0x00/0x10)
1060   1              Set_Contrast_Control(Brightness);       // Set SEG Output Current
1061   1              Set_Precharge_Period(0xF1);             // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
1062   1              Set_VCOMH(0x40);                        // Set VCOM Deselect Level
1063   1              Set_Entire_Display(0x00);               // Disable Entire Display On (0x00/0x01)
1064   1              Set_Inverse_Display(0x00);              // Disable Inverse Display On (0x00/0x01)
1065   1      
1066   1              Fill_RAM(0x00);                         // Clear Screen
1067   1      
1068   1              Set_Display_On_Off(0x01);               // Display On (0x00/0x01)
1069   1      }
1070          
1071          void main(void)
1072          {
1073   1        delay(20);//等待设备上电完成
1074   1        Init_DS18B20();
1075   1       delay(10);//等待设备上电完成
1076   1       tm0_ini();
1077   1       stc12C4052ad_uart_init();
1078   1       
1079   1       //ini_oled();
1080   1       OLED_Init_I();
1081   1       //WriteCommand(0xAD); // Set DC-DC 
1082   1       //WriteCommand(0x8B); // 8B=ON, 8A=Off 
1083   1        welcome();
1084   1        Set_Display_On_Off(0x00);
1085   1       //WriteCommand(0xaf);   //open display 
1086   1       //welcome();
1087   1       //delay(10);
1088   1      
1089   1      // while(display_sign==1)
1090   1       //{
1091   1       //display_sign=0; 
1092   1        // Temperature = ReadTemperature();
1093   1         //Temperature = 121;
1094   1              //if(flag_Negative_number=1)
1095   1         // disc(6,2,hen);
1096   1      // t0 = Temperature/100;
1097   1      // t1 = Temperature%100/10;
1098   1      // t2 = Temperature%10;
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 19  

1099   1       //t3 = Temperature%100%10;
1100   1      // disn(7,2,t0);disn(8,2,t1);disn(9,2,t2);disc(10,2,dianhao);disn(11,2,t3);//disn 数字
1101   1      
1102   1      
1103   1       while(1)
1104   1         { 
1105   2          
1106   2              Temperature = ReadTemperature();
1107   2         //Temperature = 0x00fa;
1108   2        
1109   2       t0 = Temperature/1000;
1110   2       t1 = Temperature%1000/100;
1111   2       t2 = Temperature%100/10;
1112   2       t3 = Temperature%10;
1113   2       disn(7,2,t0);disn(8,2,t1);disn(9,2,t2);disc(10,2,dianhao);disn(11,2,t3);//disn 数字
1114   2      
1115   2       send_UART(0x55);
1116   2       send_UART(wh);
1117   2      
1118   2       send_UART(0xaa);
1119   2       send_UART(wl);    
1120   2              // }
1121   2      
1122   2       /*
1123   2           if(!DOWN)
1124   2             {
1125   2               WriteCommand(0xAf); // AF=ON , AE=OFF
1126   2               while(!DOWN);
1127   2               state++;
1128   2               if(state>=10)
1129   2                 min++;
1130   2                 if(min>59) 
1131   2                  min=0;                      
1132   2                 WriteCommand(0x2e);
1133   2                 disn(4,1,min/10);
1134   2                 disn(5,1,min%10);
1135   2                 WriteCommand(0x2f);
1136   2              }
1137   2            if(!UP)
1138   2            {
1139   2              WriteCommand(0xAF); // AF=ON , AE=OFF
1140   2              while(!UP);
1141   2              if(state!=0)
1142   2              hour++;
1143   2              if(hour>23)     
1144   2              hour=0;
1145   2              WriteCommand(0x2e);
1146   2              disn(1,1,hour/10);
1147   2              disn(2,1,hour%10);
1148   2              WriteCommand(0x2f);
1149   2             }
1150   2                 */
1151   2         } 
1152   1      }
1153          
1154          void timer0() interrupt 1 using 0
1155          {
1156   1          TH0=0X4C;
1157   1          TL0=0X00;
1158   1          temp++;
1159   1              
1160   1          WriteCommand(0x2e);
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 20  

1161   1          if(temp>=20)
1162   1           {
1163   2             temp=0;
1164   2             s++;
1165   2                 
1166   2             if(s>59) 
1167   2             {//display_sign=1;
1168   3              s=0;            
1169   3              min++;          
1170   3              if(min>59) 
1171   3               {
1172   4                 min=0;                       
1173   4                 hour++;
1174   4                 if(hour>23)          
1175   4                   hour=0;
1176   4                 disn(1,1,hour/10);
1177   4                 disn(2,1,hour%10);
1178   4                }
1179   3             disn(4,1,min/10);
1180   3             disn(5,1,min%10);
1181   3             }
1182   2             disn(7,1,s/10);
1183   2             disn(8,1,s%10);
1184   2            }
1185   1           WriteCommand(0x2f);
1186   1      }
1187          
1188          /////////////////////////////////////////
1189          
1190          void welcome(void)
1191          {
1192   1        //一屏显示32个汉字
1193   1       // dish(0,0,dian);dish(2,0,zi);dish(4,0,wen);dish(6,0,du);dish(8,0,shidu);dish(10,0,zhou);dish(12,0,yi);d
             -ish(14,0,er);
1194   1       // dish(0,1,dian);dish(2,1,zi);dish(4,1,wen);dish(6,1,du);dish(8,1,shidu);dish(10,1,zhou);dish(12,1,yi);d
             -ish(14,1,er);
1195   1       // dish(0,2,dian);dish(2,2,zi);dish(4,2,wen);dish(6,2,du);dish(8,2,shidu);dish(10,2,zhou);dish(12,2,yi);d
             -ish(14,2,er);
1196   1       // dish(0,3,dian);dish(2,3,zi);dish(4,3,wen);dish(6,3,du);dish(8,3,shidu);dish(10,3,zhou);dish(12,3,yi);d
             -ish(14,3,er);
1197   1        
1198   1      //温度湿度
1199   1        disn(1,0,2);disn(2,0,0);disn(3,0,1);disn(4,0,0);dish(5,0,year);
1200   1        disn(7,0,0);disn(8,0,4);dish(9,0,month);disn(11,0,0);disn(12,0,1);dish(13,0,day);
1201   1      
1202   1        disn(1,1,0);disn(2,1,0);disc(3,1,mao);disn(4,1,0);
1203   1        disn(5,1,0);disc(6,1,mao);disn(7,1,0);disn(8,1,0);
1204   1      
1205   1        dish(11,1,zhou);dish(13,1,si);
1206   1      
1207   1        dish(1,2,wen);dish(3,2,du);disc(5,2,mao);    //dish 全字
1208   1        //disn(6,2,1);
1209   1      
1210   1        //disn(7,2,1);disn(8,2,9);disc(9,2,dianhao);disn(10,2,6);//disn 数字
1211   1        dish(13,2,dufuhao);//dish
1212   1      
1213   1        dish(1,3,shidu);dish(3,3,du);disc(5,3,mao);
1214   1        //disn(6,3,1);
1215   1        disn(7,3,6);disn(8,3,2);disc(9,3,dianhao);disn(10,3,4);//disn 数字
1216   1        disc(12,3,baifhao);disc(13,3,R);disc(14,3,H);//disc半字
1217   1              
1218   1      }
C51 COMPILER V8.12   OLEDTEST                                                              04/10/2010 15:03:03 PAGE 21  

1219          
1220          void tm0_ini(void)
1221          {
1222   1         TMOD=0x01;
1223   1         ET0=1;
1224   1         EA=1;
1225   1         TR0=1;
1226   1      }
1227          
1228          void delay(unsigned char i)
1229          {
1230   1           unsigned char j,g;
1231   1           while(--i)
1232   1            {
1233   2              for(j=0;j<200;j++)
1234   2              for(g=0;g<200;g++);
1235   2             }
1236   1       }
1237          
1238          void delay_ms(unsigned int time)
1239          {                                 
1240   1              while(--time);
1241   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2692    ----
   CONSTANT SIZE    =   2919    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     18      60
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 1   


C51 COMPILER V7.10, COMPILATION OF MODULE NEW096HANZI
OBJECT MODULE PLACED IN new096hanzi.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE new096hanzi.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   2          //
   3          //  UG-2864HSWEG01 (2864-46p) Reference Code
   4          //
   5          //    Dot Matrix: 128*64
   6          //    Driver IC : SSD1306 (Solomon Systech)
   7          //    Interface : 8-bit 68XX/80XX Parallel, 3-/4-wire SPI
   8          //    Revision  :
   9          //    Date      : 2009/06/05
  10          //    Author    :
  11          //    Editor    : Humphrey Lin
  12          //
  13          //  Copyright (c) Univision Technology Inc.
  14          //
  15          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  16          
  17          #include "NEW_8051.H"      
  18          //#include "ssd1306.h"
  19          #include "zimo.h"
  20          #include "newszimo.h"
  21          #include "ds18b20.h"
  22          
  23          
  24          /////////////////////////////////
  25          sbit UP=P3^2;
  26          sbit DOWN=P3^3;
  27          //////////////////////////////////
  28          unsigned char code Name[]={43,69,45,69,73,36,73,65,78,58,73,0};
  29                                                          // kemeidianzi
  30          unsigned char code Tel[]={17,21,25,21,19,24,22,21,18,25,19,0};
  31                                                          // 15953865293
  32          unsigned char t0=0;t1=0;t2=0;t3=0;
  33          unsigned char temp=0,s=0,min=0,hour=0;
  34          unsigned char state=1;
  35          unsigned int Temperature=0;
  36          
  37          ////////////////////////////////////
  38          bit display_sign=1;
  39          
  40          /////////////////////////////////
  41          void welcome(void);
  42          void tm0_ini(void);
  43          void delay(unsigned char i);
  44          void delay_ms(unsigned int time);
  45          
  46          //#define       M68                             // 8-bit 68XX Parallel
  47                                                          //   BS1=1; BS2=1
  48          #define         I80                             // 8-bit 80XX Parallel
  49                                                          //   BS1=0; BS2=1
  50          //#define       SPI                             // 4-wire SPI
  51                                                          //   BS1=0; BS2=0
  52                                                          //   The unused pins should be connected with VSS mostly or floating (D2).
  53                                                          //   Please refer to the SSD1306 specification for detail.
  54          #define demo  //因为demo板I/O口与OLED模块I/O口反向，定义这个宏来把数据反向的代码编译进去，如硬件一一对应则
             -注释掉即可，
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 2   

  55          
  56          
  57          #ifdef demo
  58          sbit A_0=ACC^0;//方便位操作
  59          sbit A_1=ACC^1;
  60          sbit A_2=ACC^2;
  61          sbit A_3=ACC^3;
  62          sbit A_4=ACC^4;
  63          sbit A_5=ACC^5;
  64          sbit A_6=ACC^6;
  65          sbit A_7=ACC^7;
  66          
  67          sbit B_0=B^0;//方便位操作
  68          sbit B_1=B^1;
  69          sbit B_2=B^2;
  70          sbit B_3=B^3;
  71          sbit B_4=B^4;
  72          sbit B_5=B^5;
  73          sbit B_6=B^6;
  74          sbit B_7=B^7;
  75          
  76          unsigned char SetData(unsigned char DataByte)//转换并设置P0口的数据,如接口可不需此函数
  77          {
  78   1              ACC=DataByte;
  79   1              B_1=A_0;
  80   1              B_0=A_1;
  81   1      
  82   1              B_3=A_2;
  83   1              B_2=A_3;
  84   1      
  85   1              B_5=A_4;
  86   1              B_4=A_5;
  87   1      
  88   1          B_7=A_6;
  89   1              B_6=A_7;
  90   1              
  91   1              return B;
  92   1      }
  93          #endif
  94          
  95          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  96          //  Pin Definition
  97          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  98          #define xData   P0                              // Parallel Data Input/Output
  99          
 100          //sbit SCLK=P0^0;                               // Serial Clock Input
 101          //sbit SDIN=P0^1;                               // Serial Data Input
 102          
 103          sbit RES=P1^2;                          // Reset
 104          sbit CS=P1^4;                           // Chip Select
 105          sbit DC=P1^3;                           // Data/Command Control
 106          
 107          //sbit E=P2^3;                          // Read/Write Enable
 108          //sbit RW=P2^6;                         // Read/Write Select
 109          
 110          sbit RD_oled=P1^1;                      // Read Signal
 111          sbit WR_oled=P1^0;                      // Write Signal
 112          ////
 113          
 114          
 115          unsigned char i;
 116          
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 3   

 117          extern unsigned char code num[10][16];
 118          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 119          //  Delay Time
 120          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 121          void uDelay(unsigned char l)
 122          {
 123   1              while(l--);
 124   1      }
 125          
 126          
 127          void Delay(unsigned char n)
 128          {
 129   1      unsigned char i,j,k;
 130   1      
 131   1              for(k=0;k<n;k++)
 132   1              {
 133   2                      for(i=0;i<131;i++)
 134   2                      {
 135   3                              for(j=0;j<15;j++)
 136   3                              {
 137   4                                      uDelay(203);    
 138   4                              }
 139   3                      }
 140   2              }
 141   1      }
 142          
 143          void send_UART(unsigned char i)
 144          { ES=0;
 145   1        TI=0;
 146   1        SBUF=i;
 147   1        while(TI==0);
 148   1        TI=0;
 149   1        ES=1;
 150   1      }
 151          
 152          void stc12C4052ad_uart_init(void)
 153          {  SCON=0X50;           //
 154   1         TMOD=0X21;           //
 155   1         TH1=0xff;     //19200bps
 156   1         TL1=0xfc;     //19200bps
 157   1         TR1=1;
 158   1         ES=1;        //打开串口中断
 159   1         EA=1; 
 160   1      }
 161          
 162          
 163          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 164          //  Read/Write Sequence
 165          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 166          #ifdef M68                                      // 8-bit 68XX Parallel
              void Write_Command(unsigned char Data)
              {
                      DC=0;
                      CS=0;
                      RW=0;
                      E=1;
                      #ifdef demo
                              xData=SetData(Data);
                      #else
                              xData=Data;
                      #endif
                      E=0;
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 4   

                      RW=1;
                      CS=1;
                      DC=1;
              }
              
              
              void Write_Data(unsigned char Data)
              {
                      DC=1;
                      CS=0;
                      RW=0;
                      E=1;
                      #ifdef demo
                              xData=SetData(Data);
                      #else
                              xData=Data;
                      #endif
                      E=0;
                      RW=1;
                      CS=1;
                      DC=1;
              }
              #endif
 202          
 203          
 204          #ifdef I80                                      // 8-bit 80XX Parallel
 205          void Write_Command(unsigned char Data)
 206          {
 207   1              DC=0;
 208   1              CS=0;
 209   1              WR_oled=0;
 210   1              #ifdef demo
 211   1                      xData=SetData(Data);
 212   1                      //send_UART(Data);
 213   1                      uDelay(1);
 214   1              #else
                              xData=Data;
                      #endif
 217   1              WR_oled=1;
 218   1              CS=1;
 219   1              DC=1;
 220   1      }
 221          
 222          
 223          void Write_Data(unsigned char Data)
 224          {
 225   1              DC=1;
 226   1              CS=0;
 227   1              WR_oled=0;
 228   1              #ifdef demo
 229   1                      xData=SetData(Data);
 230   1                      //send_UART(Data);
 231   1                      uDelay(1);
 232   1              #else
                              xData=Data;
                              #endif
 235   1              WR_oled=1;
 236   1              CS=1;
 237   1              DC=1;
 238   1      }
 239          #endif
 240          
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 5   

 241          
 242          #ifdef SPI                                      // 4-wire SPI
              void Write_Command(unsigned char Data)
              {
              unsigned char i;
              
                      CS=0;
                      DC=0;
                      for (i=0; i<8; i++)
                      {
                              SCLK=0;
                              SDIN=(Data&0x80)>>7;
                              Data = Data << 1;
              //              uDelay(1);
                              SCLK=1;
              //              uDelay(1);
                      }
              //      SCLK=0;
                      DC=1;
                      CS=1;
              }
              
              
              void Write_Data(unsigned char Data)
              {
              unsigned char i;
              
                      CS=0;
                      DC=1;
                      for (i=0; i<8; i++)
                      {
                              SCLK=0;
                              SDIN=(Data&0x80)>>7;
                              Data = Data << 1;
              //              uDelay(1);
                              SCLK=1;
              //              uDelay(1);
                      }
              //      SCLK=0;
                      DC=1;
                      CS=1;
              }
              #endif
 284          
 285          
 286          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 287          //  Instruction Setting
 288          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 289          void Set_Start_Column(unsigned char d)
 290          {
 291   1              Write_Command(0x00+d%16);               // Set Lower Column Start Address for Page Addressing Mode
 292   1                                                      //   Default => 0x00
 293   1              Write_Command(0x10+d/16);               // Set Higher Column Start Address for Page Addressing Mode
 294   1                                                      //   Default => 0x10
 295   1      }
 296          
 297          
 298          void Set_Addressing_Mode(unsigned char d)
 299          {
 300   1              Write_Command(0x20);                    // Set Memory Addressing Mode
 301   1              Write_Command(d);                       //   Default => 0x02
 302   1                                                      //     0x00 => Horizontal Addressing Mode
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 6   

 303   1                                                      //     0x01 => Vertical Addressing Mode
 304   1                                                      //     0x02 => Page Addressing Mode
 305   1      }
 306          
 307          
 308          void Set_Column_Address(unsigned char a, unsigned char b)
 309          {
 310   1              Write_Command(0x21);                    // Set Column Address
 311   1              Write_Command(a);                       //   Default => 0x00 (Column Start Address)
 312   1              Write_Command(b);                       //   Default => 0x7F (Column End Address)
 313   1      }
 314          
 315          
 316          void Set_Page_Address(unsigned char a, unsigned char b)
 317          {
 318   1              Write_Command(0x22);                    // Set Page Address
 319   1              Write_Command(a);                       //   Default => 0x00 (Page Start Address)
 320   1              Write_Command(b);                       //   Default => 0x07 (Page End Address)
 321   1      }
 322          
 323          
 324          void Set_Start_Line(unsigned char d)
 325          {
 326   1              Write_Command(0x40|d);                  // Set Display Start Line
 327   1                                                      //   Default => 0x40 (0x00)
 328   1      }
 329          
 330          
 331          void Set_Contrast_Control(unsigned char d)
 332          {
 333   1              Write_Command(0x81);                    // Set Contrast Control
 334   1              Write_Command(d);                       //   Default => 0x7F
 335   1      }
 336          
 337          
 338          void Set_Charge_Pump(unsigned char d)
 339          {
 340   1              Write_Command(0x8D);                    // Set Charge Pump
 341   1              Write_Command(0x10|d);                  //   Default => 0x10
 342   1                                                      //     0x10 (0x00) => Disable Charge Pump
 343   1                                                      //     0x14 (0x04) => Enable Charge Pump
 344   1      }
 345          
 346          
 347          void Set_Segment_Remap(unsigned char d)
 348          {
 349   1              Write_Command(0xA0|d);                  // Set Segment Re-Map
 350   1                                                      //   Default => 0xA0
 351   1                                                      //     0xA0 (0x00) => Column Address 0 Mapped to SEG0
 352   1                                                      //     0xA1 (0x01) => Column Address 0 Mapped to SEG127
 353   1      }
 354          
 355          
 356          void Set_Entire_Display(unsigned char d)
 357          {
 358   1              Write_Command(0xA4|d);                  // Set Entire Display On / Off
 359   1                                                      //   Default => 0xA4
 360   1                                                      //     0xA4 (0x00) => Normal Display
 361   1                                                      //     0xA5 (0x01) => Entire Display On
 362   1      }
 363          
 364          
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 7   

 365          void Set_Inverse_Display(unsigned char d)
 366          {
 367   1              Write_Command(0xA6|d);                  // Set Inverse Display On/Off
 368   1                                                      //   Default => 0xA6
 369   1                                                      //     0xA6 (0x00) => Normal Display
 370   1                                                      //     0xA7 (0x01) => Inverse Display On
 371   1      }
 372          
 373          
 374          void Set_Multiplex_Ratio(unsigned char d)
 375          {
 376   1              Write_Command(0xA8);                    // Set Multiplex Ratio
 377   1              Write_Command(d);                       //   Default => 0x3F (1/64 Duty)
 378   1      }
 379          
 380          
 381          void Set_Display_On_Off(unsigned char d)        
 382          {
 383   1              Write_Command(0xAE|d);                  // Set Display On/Off
 384   1                                                      //   Default => 0xAE
 385   1                                                      //     0xAE (0x00) => Display Off
 386   1                                                      //     0xAF (0x01) => Display On
 387   1      }
 388          
 389          
 390          void Set_Start_Page(unsigned char d)
 391          {
 392   1              Write_Command(0xB0|d);                  // Set Page Start Address for Page Addressing Mode
 393   1                                                      //   Default => 0xB0 (0x00)
 394   1      }
 395          
 396          
 397          void Set_Common_Remap(unsigned char d)
 398          {
 399   1              Write_Command(0xC0|d);                  // Set COM Output Scan Direction
 400   1                                                      //   Default => 0xC0
 401   1                                                      //     0xC0 (0x00) => Scan from COM0 to 63
 402   1                                                      //     0xC8 (0x08) => Scan from COM63 to 0
 403   1      }
 404          
 405          
 406          void Set_Display_Offset(unsigned char d)
 407          {
 408   1              Write_Command(0xD3);                    // Set Display Offset
 409   1              Write_Command(d);                       //   Default => 0x00
 410   1      }
 411          
 412          
 413          void Set_Display_Clock(unsigned char d)
 414          {
 415   1              Write_Command(0xD5);                    // Set Display Clock Divide Ratio / Oscillator Frequency
 416   1              Write_Command(d);                       //   Default => 0x80
 417   1                                                      //     D[3:0] => Display Clock Divider
 418   1                                                      //     D[7:4] => Oscillator Frequency
 419   1      }
 420          
 421          
 422          void Set_Precharge_Period(unsigned char d)
 423          {
 424   1              Write_Command(0xD9);                    // Set Pre-Charge Period
 425   1              Write_Command(d);                       //   Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
 426   1                                                      //     D[3:0] => Phase 1 Period in 1~15 Display Clocks
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 8   

 427   1                                                      //     D[7:4] => Phase 2 Period in 1~15 Display Clocks
 428   1      }
 429          
 430          
 431          void Set_Common_Config(unsigned char d)
 432          {
 433   1              Write_Command(0xDA);                    // Set COM Pins Hardware Configuration
 434   1              Write_Command(0x02|d);                  //   Default => 0x12 (0x10)
 435   1                                                      //     Alternative COM Pin Configuration
 436   1                                                      //     Disable COM Left/Right Re-Map
 437   1      }
 438          
 439          
 440          void Set_VCOMH(unsigned char d)
 441          {
 442   1              Write_Command(0xDB);                    // Set VCOMH Deselect Level
 443   1              Write_Command(d);                       //   Default => 0x20 (0.77*VCC)
 444   1      }
 445          
 446          
 447          void Set_NOP()
 448          {
 449   1              Write_Command(0xE3);                    // Command for No Operation
 450   1      }
 451          
 452          
 453          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 454          //  Global Variables
 455          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 456          #define XLevelL         0x00
 457          #define XLevelH         0x10
 458          #define XLevel          ((XLevelH&0x0F)*16+XLevelL)
 459          #define Max_Column      128
 460          #define Max_Row         64
 461          #define Brightness      0xff//0xCF
 462          
 463          
 464          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 465          //  Patterns
 466          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 467           
 468          unsigned char code kemei[][128] = { 
 469          
 470          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XE0,0XF0,0XF0,0XF8,0XFC,0XFC,0XFC,0XFE,
 471          0XFE,0XFE,0XFE,0XFE,0XFE,0XFE,0XFE,0XFE,0XFC,0XFC,0XFC,0XF8,0XF0,0X60,0X60,0X80,
 472          0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,
 473          0X00,0X00,0X80,0X80,0X80,0X00,0X80,0X00,0X00,0X80,0X80,0X00,0X00,0X00,0X00,0X80,
 474          0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X80,0X00,0X00,0X80,0X80,
 475          0X80,0X80,0X80,0X80,0XC0,0XC0,0X80,0X80,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X80,
 476          0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,
 477          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
 478          0X00,0X00,0X00,0XF0,0XFC,0XFF,0XFF,0XE0,0X01,0X07,0X1F,0X1F,0XDF,0XDF,0XDF,0X8F,
 479          0X8F,0X8F,0X8F,0X87,0X87,0X87,0X83,0X83,0X03,0X01,0X01,0X00,0X00,0X0C,0X0E,0X1F,
 480          0X1F,0X3E,0X3C,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X04,0XF5,
 481          0X1D,0XFF,0XFF,0X1D,0XF5,0X00,0X77,0XE6,0XCC,0XFF,0XFF,0X00,0X00,0X00,0X00,0XB5,
 482          0XB5,0XB5,0XB5,0XB5,0XFF,0XFF,0XFF,0XB5,0XB5,0XB5,0XB5,0XB5,0X00,0X00,0XFF,0XFF,
 483          0XFF,0X99,0X99,0X99,0XFF,0XFF,0X99,0X99,0X99,0X99,0XFF,0XFF,0X00,0X00,0XC0,0XC1,
 484          0XC1,0XC9,0XD9,0XD9,0XD9,0XD9,0XD9,0XFD,0XFF,0XC7,0XC7,0XC1,0X00,0X00,0X00,0X00,
 485          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
 486          0X00,0X00,0X00,0XEF,0XEF,0XCF,0XCF,0X8F,0X8E,0X00,0X00,0X00,0X00,0X03,0X0F,0X1F,
 487          0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7F,0X1F,
 488          0X0F,0X06,0X02,0X80,0X00,0X00,0X00,0X80,0X00,0X00,0X00,0X00,0X80,0X80,0X8C,0X0F,
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 9   

 489          0X00,0X1F,0X1F,0X00,0X0F,0X08,0X06,0X06,0X06,0X0F,0X1F,0X03,0X00,0X00,0X80,0X99,
 490          0X19,0X19,0X0F,0X0F,0X03,0X03,0X03,0X0F,0X0F,0X09,0X19,0X19,0X00,0X00,0X81,0X81,
 491          0X01,0X01,0X81,0X01,0X0F,0X1F,0X19,0X19,0X19,0X99,0X99,0X99,0X00,0X00,0X00,0X88,
 492          0X98,0X98,0X18,0X18,0X98,0X98,0X1C,0X8F,0X07,0X00,0X00,0X80,0X80,0X80,0X80,0X00,
 493          0X00,0X00,0X00,0X80,0X80,0X00,0X00,0X00,0X00,0X80,0X00,0X00,0X00,0X00,0X00,0X00,
 494          0X00,0X00,0X00,0X00,0X01,0X07,0X0F,0X1F,0X3F,0X7F,0XFF,0XFE,0XFE,0XFC,0XF8,0XF0,
 495          0XF0,0XE0,0XC3,0X8F,0X1F,0X3F,0XFF,0XFF,0XFF,0XFF,0XEF,0X03,0X01,0X00,0X00,0X00,
 496          0X60,0XF2,0XFE,0X1F,0XDF,0XFC,0X1F,0XE1,0XFC,0XFF,0XDF,0XC9,0X03,0X03,0XE1,0XFC,
 497          0X3F,0X07,0XF3,0XFE,0X7F,0XFF,0X33,0XF8,0X1F,0XE3,0XF8,0XFF,0XDF,0XDB,0X01,0X03,
 498          0XF1,0XFE,0X3F,0X0F,0X01,0X00,0X00,0X00,0XC0,0XF0,0XFE,0XCF,0XCB,0X41,0X03,0XE1,
 499          0XFC,0XFF,0XC7,0X01,0XE0,0XE0,0XFC,0XDF,0XDF,0XC1,0X03,0XE1,0XF8,0XFF,0XC7,0XC3,
 500          0X03,0X03,0X61,0XF7,0X7F,0X1F,0X03,0XE1,0XFC,0X7E,0X1F,0XDF,0X79,0X0F,0X03,0XE0,
 501          0XF0,0XDF,0XC7,0X63,0X1F,0X07,0XF8,0X7E,0X1F,0XFF,0XF9,0X1C,0X03,0X00,0X00,0X00,
 502          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X03,0X03,
 503          0X07,0X07,0X07,0X07,0X07,0X02,0X00,0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0X00,
 504          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
 505          0X08,0XF8,0X08,0X00,0XF8,0XA8,0XA8,0X00,0XF8,0X80,0X80,0X00,0XA0,0X00,0X00,0X00,
 506          0X00,0X00,0XF8,0X00,0XA8,0XA8,0XF8,0X00,0XE8,0XA8,0XB8,0X00,0XE8,0XA8,0XB8,0X00,
 507          0XE8,0XA8,0XB8,0X00,0XB8,0XA8,0XF8,0X00,0X08,0X08,0XF8,0X00,0XE8,0XA8,0XB8,0X00,
 508          0XB8,0XA8,0XE8,0X00,0XB8,0XA8,0XE8,0X00,0XA8,0XA8,0XF8,0X00,0X00,0X00,0X00,0X00,
 509          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
 510          };
 511          
 512          unsigned char code shiyan[][128]  = { 
 513          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
 514          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X1F,0X01,0X00,0X1F,
 515          0X15,0X15,0X00,0X1F,0X10,0X10,0X00,0X14,0X00,0X00,0X00,0X00,0X00,0X1F,0X00,0X15,
 516          0X15,0X1F,0X00,0X1D,0X15,0X17,0X00,0X1D,0X15,0X17,0X00,0X1D,0X15,0X17,0X00,0X17,
 517          0X15,0X1F,0X00,0X01,0X01,0X1F,0X00,0X1D,0X15,0X17,0X00,0X17,0X15,0X1D,0X00,0X17,
 518          0X15,0X1D,0X00,0X15,0X15,0X1F,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
 519          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
 520          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
 521          };
 522          
 523          
 524          
 525          unsigned char code Ascii_1[240][5]={            // Refer to "Times New Roman" Font Database...
 526                                                          //   Basic Characters
 527                  {0x00,0x00,0x4F,0x00,0x00},             //   (  1)  ! - 0x0021 Exclamation Mark
 528                  {0x00,0x07,0x00,0x07,0x00},             //   (  2)  " - 0x0022 Quotation Mark
 529                  {0x14,0x7F,0x14,0x7F,0x14},             //   (  3)  # - 0x0023 Number Sign
 530                  {0x24,0x2A,0x7F,0x2A,0x12},             //   (  4)  $ - 0x0024 Dollar Sign
 531                  {0x23,0x13,0x08,0x64,0x62},             //   (  5)  % - 0x0025 Percent Sign
 532                  {0x36,0x49,0x55,0x22,0x50},             //   (  6)  & - 0x0026 Ampersand
 533                  {0x00,0x05,0x03,0x00,0x00},             //   (  7)  ' - 0x0027 Apostrophe
 534                  {0x00,0x1C,0x22,0x41,0x00},             //   (  8)  ( - 0x0028 Left Parenthesis
 535                  {0x00,0x41,0x22,0x1C,0x00},             //   (  9)  ) - 0x0029 Right Parenthesis
 536                  {0x14,0x08,0x3E,0x08,0x14},             //   ( 10)  * - 0x002A Asterisk
 537                  {0x08,0x08,0x3E,0x08,0x08},             //   ( 11)  + - 0x002B Plus Sign
 538                  {0x00,0x50,0x30,0x00,0x00},             //   ( 12)  , - 0x002C Comma
 539                  {0x08,0x08,0x08,0x08,0x08},             //   ( 13)  - - 0x002D Hyphen-Minus
 540                  {0x00,0x60,0x60,0x00,0x00},             //   ( 14)  . - 0x002E Full Stop
 541                  {0x20,0x10,0x08,0x04,0x02},             //   ( 15)  / - 0x002F Solidus
 542                  {0x3E,0x51,0x49,0x45,0x3E},             //   ( 16)  0 - 0x0030 Digit Zero
 543                  {0x00,0x42,0x7F,0x40,0x00},             //   ( 17)  1 - 0x0031 Digit One
 544                  {0x42,0x61,0x51,0x49,0x46},             //   ( 18)  2 - 0x0032 Digit Two
 545                  {0x21,0x41,0x45,0x4B,0x31},             //   ( 19)  3 - 0x0033 Digit Three
 546                  {0x18,0x14,0x12,0x7F,0x10},             //   ( 20)  4 - 0x0034 Digit Four
 547                  {0x27,0x45,0x45,0x45,0x39},             //   ( 21)  5 - 0x0035 Digit Five
 548                  {0x3C,0x4A,0x49,0x49,0x30},             //   ( 22)  6 - 0x0036 Digit Six
 549                  {0x01,0x71,0x09,0x05,0x03},             //   ( 23)  7 - 0x0037 Digit Seven
 550                  {0x36,0x49,0x49,0x49,0x36},             //   ( 24)  8 - 0x0038 Digit Eight
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 10  

 551                  {0x06,0x49,0x49,0x29,0x1E},             //   ( 25)  9 - 0x0039 Dight Nine
 552                  {0x00,0x36,0x36,0x00,0x00},             //   ( 26)  : - 0x003A Colon
 553                  {0x00,0x56,0x36,0x00,0x00},             //   ( 27)  ; - 0x003B Semicolon
 554                  {0x08,0x14,0x22,0x41,0x00},             //   ( 28)  < - 0x003C Less-Than Sign
 555                  {0x14,0x14,0x14,0x14,0x14},             //   ( 29)  = - 0x003D Equals Sign
 556                  {0x00,0x41,0x22,0x14,0x08},             //   ( 30)  > - 0x003E Greater-Than Sign
 557                  {0x02,0x01,0x51,0x09,0x06},             //   ( 31)  ? - 0x003F Question Mark
 558                  {0x32,0x49,0x79,0x41,0x3E},             //   ( 32)  @ - 0x0040 Commercial At
 559                  {0x7E,0x11,0x11,0x11,0x7E},             //   ( 33)  A - 0x0041 Latin Capital Letter A
 560                  {0x7F,0x49,0x49,0x49,0x36},             //   ( 34)  B - 0x0042 Latin Capital Letter B
 561                  {0x3E,0x41,0x41,0x41,0x22},             //   ( 35)  C - 0x0043 Latin Capital Letter C
 562                  {0x7F,0x41,0x41,0x22,0x1C},             //   ( 36)  D - 0x0044 Latin Capital Letter D
 563                  {0x7F,0x49,0x49,0x49,0x41},             //   ( 37)  E - 0x0045 Latin Capital Letter E
 564                  {0x7F,0x09,0x09,0x09,0x01},             //   ( 38)  F - 0x0046 Latin Capital Letter F
 565                  {0x3E,0x41,0x49,0x49,0x7A},             //   ( 39)  G - 0x0047 Latin Capital Letter G
 566                  {0x7F,0x08,0x08,0x08,0x7F},             //   ( 40)  H - 0x0048 Latin Capital Letter H
 567                  {0x00,0x41,0x7F,0x41,0x00},             //   ( 41)  I - 0x0049 Latin Capital Letter I
 568                  {0x20,0x40,0x41,0x3F,0x01},             //   ( 42)  J - 0x004A Latin Capital Letter J
 569                  {0x7F,0x08,0x14,0x22,0x41},             //   ( 43)  K - 0x004B Latin Capital Letter K
 570                  {0x7F,0x40,0x40,0x40,0x40},             //   ( 44)  L - 0x004C Latin Capital Letter L
 571                  {0x7F,0x02,0x0C,0x02,0x7F},             //   ( 45)  M - 0x004D Latin Capital Letter M
 572                  {0x7F,0x04,0x08,0x10,0x7F},             //   ( 46)  N - 0x004E Latin Capital Letter N
 573                  {0x3E,0x41,0x41,0x41,0x3E},             //   ( 47)  O - 0x004F Latin Capital Letter O
 574                  {0x7F,0x09,0x09,0x09,0x06},             //   ( 48)  P - 0x0050 Latin Capital Letter P
 575                  {0x3E,0x41,0x51,0x21,0x5E},             //   ( 49)  Q - 0x0051 Latin Capital Letter Q
 576                  {0x7F,0x09,0x19,0x29,0x46},             //   ( 50)  R - 0x0052 Latin Capital Letter R
 577                  {0x46,0x49,0x49,0x49,0x31},             //   ( 51)  S - 0x0053 Latin Capital Letter S
 578                  {0x01,0x01,0x7F,0x01,0x01},             //   ( 52)  T - 0x0054 Latin Capital Letter T
 579                  {0x3F,0x40,0x40,0x40,0x3F},             //   ( 53)  U - 0x0055 Latin Capital Letter U
 580                  {0x1F,0x20,0x40,0x20,0x1F},             //   ( 54)  V - 0x0056 Latin Capital Letter V
 581                  {0x3F,0x40,0x38,0x40,0x3F},             //   ( 55)  W - 0x0057 Latin Capital Letter W
 582                  {0x63,0x14,0x08,0x14,0x63},             //   ( 56)  X - 0x0058 Latin Capital Letter X
 583                  {0x07,0x08,0x70,0x08,0x07},             //   ( 57)  Y - 0x0059 Latin Capital Letter Y
 584                  {0x61,0x51,0x49,0x45,0x43},             //   ( 58)  Z - 0x005A Latin Capital Letter Z
 585                  {0x00,0x7F,0x41,0x41,0x00},             //   ( 59)  [ - 0x005B Left Square Bracket
 586                  {0x02,0x04,0x08,0x10,0x20},             //   ( 60)  \ - 0x005C Reverse Solidus
 587                  {0x00,0x41,0x41,0x7F,0x00},             //   ( 61)  ] - 0x005D Right Square Bracket
 588                  {0x04,0x02,0x01,0x02,0x04},             //   ( 62)  ^ - 0x005E Circumflex Accent
 589                  {0x40,0x40,0x40,0x40,0x40},             //   ( 63)  _ - 0x005F Low Line
 590                  {0x01,0x02,0x04,0x00,0x00},             //   ( 64)  ` - 0x0060 Grave Accent
 591                  {0x20,0x54,0x54,0x54,0x78},             //   ( 65)  a - 0x0061 Latin Small Letter A
 592                  {0x7F,0x48,0x44,0x44,0x38},             //   ( 66)  b - 0x0062 Latin Small Letter B
 593                  {0x38,0x44,0x44,0x44,0x20},             //   ( 67)  c - 0x0063 Latin Small Letter C
 594                  {0x38,0x44,0x44,0x48,0x7F},             //   ( 68)  d - 0x0064 Latin Small Letter D
 595                  {0x38,0x54,0x54,0x54,0x18},             //   ( 69)  e - 0x0065 Latin Small Letter E
 596                  {0x08,0x7E,0x09,0x01,0x02},             //   ( 70)  f - 0x0066 Latin Small Letter F
 597                  {0x06,0x49,0x49,0x49,0x3F},             //   ( 71)  g - 0x0067 Latin Small Letter G
 598                  {0x7F,0x08,0x04,0x04,0x78},             //   ( 72)  h - 0x0068 Latin Small Letter H
 599                  {0x00,0x44,0x7D,0x40,0x00},             //   ( 73)  i - 0x0069 Latin Small Letter I
 600                  {0x20,0x40,0x44,0x3D,0x00},             //   ( 74)  j - 0x006A Latin Small Letter J
 601                  {0x7F,0x10,0x28,0x44,0x00},             //   ( 75)  k - 0x006B Latin Small Letter K
 602                  {0x00,0x41,0x7F,0x40,0x00},             //   ( 76)  l - 0x006C Latin Small Letter L
 603                  {0x7C,0x04,0x18,0x04,0x7C},             //   ( 77)  m - 0x006D Latin Small Letter M
 604                  {0x7C,0x08,0x04,0x04,0x78},             //   ( 78)  n - 0x006E Latin Small Letter N
 605                  {0x38,0x44,0x44,0x44,0x38},             //   ( 79)  o - 0x006F Latin Small Letter O
 606                  {0x7C,0x14,0x14,0x14,0x08},             //   ( 80)  p - 0x0070 Latin Small Letter P
 607                  {0x08,0x14,0x14,0x18,0x7C},             //   ( 81)  q - 0x0071 Latin Small Letter Q
 608                  {0x7C,0x08,0x04,0x04,0x08},             //   ( 82)  r - 0x0072 Latin Small Letter R
 609                  {0x48,0x54,0x54,0x54,0x20},             //   ( 83)  s - 0x0073 Latin Small Letter S
 610                  {0x04,0x3F,0x44,0x40,0x20},             //   ( 84)  t - 0x0074 Latin Small Letter T
 611                  {0x3C,0x40,0x40,0x20,0x7C},             //   ( 85)  u - 0x0075 Latin Small Letter U
 612                  {0x1C,0x20,0x40,0x20,0x1C},             //   ( 86)  v - 0x0076 Latin Small Letter V
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 11  

 613                  {0x3C,0x40,0x30,0x40,0x3C},             //   ( 87)  w - 0x0077 Latin Small Letter W
 614                  {0x44,0x28,0x10,0x28,0x44},             //   ( 88)  x - 0x0078 Latin Small Letter X
 615                  {0x0C,0x50,0x50,0x50,0x3C},             //   ( 89)  y - 0x0079 Latin Small Letter Y
 616                  {0x44,0x64,0x54,0x4C,0x44},             //   ( 90)  z - 0x007A Latin Small Letter Z
 617                  {0x00,0x08,0x36,0x41,0x00},             //   ( 91)  { - 0x007B Left Curly Bracket
 618                  {0x00,0x00,0x7F,0x00,0x00},             //   ( 92)  | - 0x007C Vertical Line
 619                  {0x00,0x41,0x36,0x08,0x00},             //   ( 93)  } - 0x007D Right Curly Bracket
 620                  {0x02,0x01,0x02,0x04,0x02},             //   ( 94)  ~ - 0x007E Tilde
 621                  {0x3E,0x55,0x55,0x41,0x22},             //   ( 95)  C - 0x0080 <Control>
 622                  {0x00,0x00,0x00,0x00,0x00},             //   ( 96)    - 0x00A0 No-Break Space
 623                  {0x00,0x00,0x79,0x00,0x00},             //   ( 97)  ! - 0x00A1 Inverted Exclamation Mark
 624                  {0x18,0x24,0x74,0x2E,0x24},             //   ( 98)  c - 0x00A2 Cent Sign
 625                  {0x48,0x7E,0x49,0x42,0x40},             //   ( 99)  L - 0x00A3 Pound Sign
 626                  {0x5D,0x22,0x22,0x22,0x5D},             //   (100)  o - 0x00A4 Currency Sign
 627                  {0x15,0x16,0x7C,0x16,0x15},             //   (101)  Y - 0x00A5 Yen Sign
 628                  {0x00,0x00,0x77,0x00,0x00},             //   (102)  | - 0x00A6 Broken Bar
 629                  {0x0A,0x55,0x55,0x55,0x28},             //   (103)    - 0x00A7 Section Sign
 630                  {0x00,0x01,0x00,0x01,0x00},             //   (104)  " - 0x00A8 Diaeresis
 631                  {0x00,0x0A,0x0D,0x0A,0x04},             //   (105)    - 0x00AA Feminine Ordinal Indicator
 632                  {0x08,0x14,0x2A,0x14,0x22},             //   (106) << - 0x00AB Left-Pointing Double Angle Quotation Mark
 633                  {0x04,0x04,0x04,0x04,0x1C},             //   (107)    - 0x00AC Not Sign
 634                  {0x00,0x08,0x08,0x08,0x00},             //   (108)  - - 0x00AD Soft Hyphen
 635                  {0x01,0x01,0x01,0x01,0x01},             //   (109)    - 0x00AF Macron
 636                  {0x00,0x02,0x05,0x02,0x00},             //   (110)    - 0x00B0 Degree Sign
 637                  {0x44,0x44,0x5F,0x44,0x44},             //   (111) +- - 0x00B1 Plus-Minus Sign
 638                  {0x00,0x00,0x04,0x02,0x01},             //   (112)  ` - 0x00B4 Acute Accent
 639                  {0x7E,0x20,0x20,0x10,0x3E},             //   (113)  u - 0x00B5 Micro Sign
 640                  {0x06,0x0F,0x7F,0x00,0x7F},             //   (114)    - 0x00B6 Pilcrow Sign
 641                  {0x00,0x18,0x18,0x00,0x00},             //   (115)  . - 0x00B7 Middle Dot
 642                  {0x00,0x40,0x50,0x20,0x00},             //   (116)    - 0x00B8 Cedilla
 643                  {0x00,0x0A,0x0D,0x0A,0x00},             //   (117)    - 0x00BA Masculine Ordinal Indicator
 644                  {0x22,0x14,0x2A,0x14,0x08},             //   (118) >> - 0x00BB Right-Pointing Double Angle Quotation Mark
 645                  {0x17,0x08,0x34,0x2A,0x7D},             //   (119) /4 - 0x00BC Vulgar Fraction One Quarter
 646                  {0x17,0x08,0x04,0x6A,0x59},             //   (120) /2 - 0x00BD Vulgar Fraction One Half
 647                  {0x30,0x48,0x45,0x40,0x20},             //   (121)  ? - 0x00BF Inverted Question Mark
 648                  {0x70,0x29,0x26,0x28,0x70},             //   (122) `A - 0x00C0 Latin Capital Letter A with Grave
 649                  {0x70,0x28,0x26,0x29,0x70},             //   (123) 'A - 0x00C1 Latin Capital Letter A with Acute
 650                  {0x70,0x2A,0x25,0x2A,0x70},             //   (124) ^A - 0x00C2 Latin Capital Letter A with Circumflex
 651                  {0x72,0x29,0x26,0x29,0x70},             //   (125) ~A - 0x00C3 Latin Capital Letter A with Tilde
 652                  {0x70,0x29,0x24,0x29,0x70},             //   (126) "A - 0x00C4 Latin Capital Letter A with Diaeresis
 653                  {0x70,0x2A,0x2D,0x2A,0x70},             //   (127)  A - 0x00C5 Latin Capital Letter A with Ring Above
 654                  {0x7E,0x11,0x7F,0x49,0x49},             //   (128) AE - 0x00C6 Latin Capital Letter Ae
 655                  {0x0E,0x51,0x51,0x71,0x11},             //   (129)  C - 0x00C7 Latin Capital Letter C with Cedilla
 656                  {0x7C,0x55,0x56,0x54,0x44},             //   (130) `E - 0x00C8 Latin Capital Letter E with Grave
 657                  {0x7C,0x55,0x56,0x54,0x44},             //   (131) 'E - 0x00C9 Latin Capital Letter E with Acute
 658                  {0x7C,0x56,0x55,0x56,0x44},             //   (132) ^E - 0x00CA Latin Capital Letter E with Circumflex
 659                  {0x7C,0x55,0x54,0x55,0x44},             //   (133) "E - 0x00CB Latin Capital Letter E with Diaeresis
 660                  {0x00,0x45,0x7E,0x44,0x00},             //   (134) `I - 0x00CC Latin Capital Letter I with Grave
 661                  {0x00,0x44,0x7E,0x45,0x00},             //   (135) 'I - 0x00CD Latin Capital Letter I with Acute
 662                  {0x00,0x46,0x7D,0x46,0x00},             //   (136) ^I - 0x00CE Latin Capital Letter I with Circumflex
 663                  {0x00,0x45,0x7C,0x45,0x00},             //   (137) "I - 0x00CF Latin Capital Letter I with Diaeresis
 664                  {0x7F,0x49,0x49,0x41,0x3E},             //   (138)  D - 0x00D0 Latin Capital Letter Eth
 665                  {0x7C,0x0A,0x11,0x22,0x7D},             //   (139) ~N - 0x00D1 Latin Capital Letter N with Tilde
 666                  {0x38,0x45,0x46,0x44,0x38},             //   (140) `O - 0x00D2 Latin Capital Letter O with Grave
 667                  {0x38,0x44,0x46,0x45,0x38},             //   (141) 'O - 0x00D3 Latin Capital Letter O with Acute
 668                  {0x38,0x46,0x45,0x46,0x38},             //   (142) ^O - 0x00D4 Latin Capital Letter O with Circumflex
 669                  {0x38,0x46,0x45,0x46,0x39},             //   (143) ~O - 0x00D5 Latin Capital Letter O with Tilde
 670                  {0x38,0x45,0x44,0x45,0x38},             //   (144) "O - 0x00D6 Latin Capital Letter O with Diaeresis
 671                  {0x22,0x14,0x08,0x14,0x22},             //   (145)  x - 0x00D7 Multiplcation Sign
 672                  {0x2E,0x51,0x49,0x45,0x3A},             //   (146)  O - 0x00D8 Latin Capital Letter O with Stroke
 673                  {0x3C,0x41,0x42,0x40,0x3C},             //   (147) `U - 0x00D9 Latin Capital Letter U with Grave
 674                  {0x3C,0x40,0x42,0x41,0x3C},             //   (148) 'U - 0x00DA Latin Capital Letter U with Acute
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 12  

 675                  {0x3C,0x42,0x41,0x42,0x3C},             //   (149) ^U - 0x00DB Latin Capital Letter U with Circumflex
 676                  {0x3C,0x41,0x40,0x41,0x3C},             //   (150) "U - 0x00DC Latin Capital Letter U with Diaeresis
 677                  {0x0C,0x10,0x62,0x11,0x0C},             //   (151) `Y - 0x00DD Latin Capital Letter Y with Acute
 678                  {0x7F,0x12,0x12,0x12,0x0C},             //   (152)  P - 0x00DE Latin Capital Letter Thom
 679                  {0x40,0x3E,0x01,0x49,0x36},             //   (153)  B - 0x00DF Latin Capital Letter Sharp S
 680                  {0x20,0x55,0x56,0x54,0x78},             //   (154) `a - 0x00E0 Latin Small Letter A with Grave
 681                  {0x20,0x54,0x56,0x55,0x78},             //   (155) 'a - 0x00E1 Latin Small Letter A with Acute
 682                  {0x20,0x56,0x55,0x56,0x78},             //   (156) ^a - 0x00E2 Latin Small Letter A with Circumflex
 683                  {0x20,0x55,0x56,0x55,0x78},             //   (157) ~a - 0x00E3 Latin Small Letter A with Tilde
 684                  {0x20,0x55,0x54,0x55,0x78},             //   (158) "a - 0x00E4 Latin Small Letter A with Diaeresis
 685                  {0x20,0x56,0x57,0x56,0x78},             //   (159)  a - 0x00E5 Latin Small Letter A with Ring Above
 686                  {0x24,0x54,0x78,0x54,0x58},             //   (160) ae - 0x00E6 Latin Small Letter Ae
 687                  {0x0C,0x52,0x52,0x72,0x13},             //   (161)  c - 0x00E7 Latin Small Letter c with Cedilla
 688                  {0x38,0x55,0x56,0x54,0x18},             //   (162) `e - 0x00E8 Latin Small Letter E with Grave
 689                  {0x38,0x54,0x56,0x55,0x18},             //   (163) 'e - 0x00E9 Latin Small Letter E with Acute
 690                  {0x38,0x56,0x55,0x56,0x18},             //   (164) ^e - 0x00EA Latin Small Letter E with Circumflex
 691                  {0x38,0x55,0x54,0x55,0x18},             //   (165) "e - 0x00EB Latin Small Letter E with Diaeresis
 692                  {0x00,0x49,0x7A,0x40,0x00},             //   (166) `i - 0x00EC Latin Small Letter I with Grave
 693                  {0x00,0x48,0x7A,0x41,0x00},             //   (167) 'i - 0x00ED Latin Small Letter I with Acute
 694                  {0x00,0x4A,0x79,0x42,0x00},             //   (168) ^i - 0x00EE Latin Small Letter I with Circumflex
 695                  {0x00,0x4A,0x78,0x42,0x00},             //   (169) "i - 0x00EF Latin Small Letter I with Diaeresis
 696                  {0x31,0x4A,0x4E,0x4A,0x30},             //   (170)    - 0x00F0 Latin Small Letter Eth
 697                  {0x7A,0x11,0x0A,0x09,0x70},             //   (171) ~n - 0x00F1 Latin Small Letter N with Tilde
 698                  {0x30,0x49,0x4A,0x48,0x30},             //   (172) `o - 0x00F2 Latin Small Letter O with Grave
 699                  {0x30,0x48,0x4A,0x49,0x30},             //   (173) 'o - 0x00F3 Latin Small Letter O with Acute
 700                  {0x30,0x4A,0x49,0x4A,0x30},             //   (174) ^o - 0x00F4 Latin Small Letter O with Circumflex
 701                  {0x30,0x4A,0x49,0x4A,0x31},             //   (175) ~o - 0x00F5 Latin Small Letter O with Tilde
 702                  {0x30,0x4A,0x48,0x4A,0x30},             //   (176) "o - 0x00F6 Latin Small Letter O with Diaeresis
 703                  {0x08,0x08,0x2A,0x08,0x08},             //   (177)  + - 0x00F7 Division Sign
 704                  {0x38,0x64,0x54,0x4C,0x38},             //   (178)  o - 0x00F8 Latin Small Letter O with Stroke
 705                  {0x38,0x41,0x42,0x20,0x78},             //   (179) `u - 0x00F9 Latin Small Letter U with Grave
 706                  {0x38,0x40,0x42,0x21,0x78},             //   (180) 'u - 0x00FA Latin Small Letter U with Acute
 707                  {0x38,0x42,0x41,0x22,0x78},             //   (181) ^u - 0x00FB Latin Small Letter U with Circumflex
 708                  {0x38,0x42,0x40,0x22,0x78},             //   (182) "u - 0x00FC Latin Small Letter U with Diaeresis
 709                  {0x0C,0x50,0x52,0x51,0x3C},             //   (183) 'y - 0x00FD Latin Small Letter Y with Acute
 710                  {0x7E,0x14,0x14,0x14,0x08},             //   (184)  p - 0x00FE Latin Small Letter Thom
 711                  {0x0C,0x51,0x50,0x51,0x3C},             //   (185) "y - 0x00FF Latin Small Letter Y with Diaeresis
 712                  {0x1E,0x09,0x09,0x29,0x5E},             //   (186)  A - 0x0104 Latin Capital Letter A with Ogonek
 713                  {0x08,0x15,0x15,0x35,0x4E},             //   (187)  a - 0x0105 Latin Small Letter A with Ogonek
 714                  {0x38,0x44,0x46,0x45,0x20},             //   (188) 'C - 0x0106 Latin Capital Letter C with Acute
 715                  {0x30,0x48,0x4A,0x49,0x20},             //   (189) 'c - 0x0107 Latin Small Letter C with Acute
 716                  {0x38,0x45,0x46,0x45,0x20},             //   (190)  C - 0x010C Latin Capital Letter C with Caron
 717                  {0x30,0x49,0x4A,0x49,0x20},             //   (191)  c - 0x010D Latin Small Letter C with Caron
 718                  {0x7C,0x45,0x46,0x45,0x38},             //   (192)  D - 0x010E Latin Capital Letter D with Caron
 719                  {0x20,0x50,0x50,0x7C,0x03},             //   (193) d' - 0x010F Latin Small Letter D with Caron
 720                  {0x1F,0x15,0x15,0x35,0x51},             //   (194)  E - 0x0118 Latin Capital Letter E with Ogonek
 721                  {0x0E,0x15,0x15,0x35,0x46},             //   (195)  e - 0x0119 Latin Small Letter E with Ogonek
 722                  {0x7C,0x55,0x56,0x55,0x44},             //   (196)  E - 0x011A Latin Capital Letter E with Caron
 723                  {0x38,0x55,0x56,0x55,0x18},             //   (197)  e - 0x011B Latin Small Letter E with Caron
 724                  {0x00,0x44,0x7C,0x40,0x00},             //   (198)  i - 0x0131 Latin Small Letter Dotless I
 725                  {0x7F,0x48,0x44,0x40,0x40},             //   (199)  L - 0x0141 Latin Capital Letter L with Stroke
 726                  {0x00,0x49,0x7F,0x44,0x00},             //   (200)  l - 0x0142 Latin Small Letter L with Stroke
 727                  {0x7C,0x08,0x12,0x21,0x7C},             //   (201) 'N - 0x0143 Latin Capital Letter N with Acute
 728                  {0x78,0x10,0x0A,0x09,0x70},             //   (202) 'n - 0x0144 Latin Small Letter N with Acute
 729                  {0x7C,0x09,0x12,0x21,0x7C},             //   (203)  N - 0x0147 Latin Capital Letter N with Caron
 730                  {0x78,0x11,0x0A,0x09,0x70},             //   (204)  n - 0x0148 Latin Small Letter N with Caron
 731                  {0x38,0x47,0x44,0x47,0x38},             //   (205) "O - 0x0150 Latin Capital Letter O with Double Acute
 732                  {0x30,0x4B,0x48,0x4B,0x30},             //   (206) "o - 0x0151 Latin Small Letter O with Double Acute
 733                  {0x3E,0x41,0x7F,0x49,0x49},             //   (207) OE - 0x0152 Latin Capital Ligature Oe
 734                  {0x38,0x44,0x38,0x54,0x58},             //   (208) oe - 0x0153 Latin Small Ligature Oe
 735                  {0x7C,0x15,0x16,0x35,0x48},             //   (209)  R - 0x0158 Latin Capital Letter R with Caron
 736                  {0x78,0x11,0x0A,0x09,0x10},             //   (210)  r - 0x0159 Latin Small Letter R with Caron
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 13  

 737                  {0x48,0x54,0x56,0x55,0x20},             //   (211) 'S - 0x015A Latin Capital Letter S with Acute
 738                  {0x20,0x48,0x56,0x55,0x20},             //   (212) 's - 0x015B Latin Small Letter S with Acute
 739                  {0x48,0x55,0x56,0x55,0x20},             //   (213)  S - 0x0160 Latin Capital Letter S with Caron
 740                  {0x20,0x49,0x56,0x55,0x20},             //   (214)  s - 0x0161 Latin Small Letter S with Caron
 741                  {0x04,0x05,0x7E,0x05,0x04},             //   (215)  T - 0x0164 Latin Capital Letter T with Caron
 742                  {0x08,0x3C,0x48,0x22,0x01},             //   (216) t' - 0x0165 Latin Small Letter T with Caron
 743                  {0x3C,0x42,0x45,0x42,0x3C},             //   (217)  U - 0x016E Latin Capital Letter U with Ring Above
 744                  {0x38,0x42,0x45,0x22,0x78},             //   (218)  u - 0x016F Latin Small Letter U with Ring Above
 745                  {0x3C,0x43,0x40,0x43,0x3C},             //   (219) "U - 0x0170 Latin Capital Letter U with Double Acute
 746                  {0x38,0x43,0x40,0x23,0x78},             //   (220) "u - 0x0171 Latin Small Letter U with Double Acute
 747                  {0x0C,0x11,0x60,0x11,0x0C},             //   (221) "Y - 0x0178 Latin Capital Letter Y with Diaeresis
 748                  {0x44,0x66,0x55,0x4C,0x44},             //   (222) 'Z - 0x0179 Latin Capital Letter Z with Acute
 749                  {0x48,0x6A,0x59,0x48,0x00},             //   (223) 'z - 0x017A Latin Small Letter Z with Acute
 750                  {0x44,0x64,0x55,0x4C,0x44},             //   (224)  Z - 0x017B Latin Capital Letter Z with Dot Above
 751                  {0x48,0x68,0x5A,0x48,0x00},             //   (225)  z - 0x017C Latin Small Letter Z with Dot Above
 752                  {0x44,0x65,0x56,0x4D,0x44},             //   (226)  Z - 0x017D Latin Capital Letter Z with Caron
 753                  {0x48,0x69,0x5A,0x49,0x00},             //   (227)  z - 0x017E Latin Small Letter Z with Caron
 754                  {0x00,0x02,0x01,0x02,0x00},             //   (228)  ^ - 0x02C6 Modifier Letter Circumflex Accent
 755                  {0x00,0x01,0x02,0x01,0x00},             //   (229)    - 0x02C7 Caron
 756                  {0x00,0x01,0x01,0x01,0x00},             //   (230)    - 0x02C9 Modifier Letter Macron
 757                  {0x01,0x02,0x02,0x01,0x00},             //   (231)    - 0x02D8 Breve
 758                  {0x00,0x00,0x01,0x00,0x00},             //   (232)    - 0x02D9 Dot Above
 759                  {0x00,0x02,0x05,0x02,0x00},             //   (233)    - 0x02DA Ring Above
 760                  {0x02,0x01,0x02,0x01,0x00},             //   (234)  ~ - 0x02DC Small Tilde
 761                  {0x7F,0x05,0x15,0x3A,0x50},             //   (235) Pt - 0x20A7 Peseta Sign
 762                  {0x3E,0x55,0x55,0x41,0x22},             //   (236)  C - 0x20AC Euro Sign
 763                  {0x18,0x14,0x08,0x14,0x0C},             //   (237)    - 0x221E Infinity
 764                  {0x44,0x4A,0x4A,0x51,0x51},             //   (238)  < - 0x2264 Less-Than or Equal to
 765                  {0x51,0x51,0x4A,0x4A,0x44},             //   (239)  > - 0x2265 Greater-Than or Equal to
 766                  {0x74,0x42,0x41,0x42,0x74},             //   (240)    - 0x2302 House
 767          };
 768          
 769          
 770          unsigned char code Ascii_2[107][5]={            // Refer to "Times New Roman" Font Database...
 771                                                          //   Greek & Japanese Letters
 772                  {0x7E,0x11,0x11,0x11,0x7E},             //   (  1)  A - 0x0391 Greek Capital Letter Alpha
 773                  {0x7F,0x49,0x49,0x49,0x36},             //   (  2)  B - 0x0392 Greek Capital Letter Beta
 774                  {0x7F,0x02,0x01,0x01,0x03},             //   (  3)    - 0x0393 Greek Capital Letter Gamma
 775                  {0x70,0x4E,0x41,0x4E,0x70},             //   (  4)    - 0x0394 Greek Capital Letter Delta
 776                  {0x7F,0x49,0x49,0x49,0x41},             //   (  5)  E - 0x0395 Greek Capital Letter Epsilon
 777                  {0x61,0x51,0x49,0x45,0x43},             //   (  6)  Z - 0x0396 Greek Capital Letter Zeta
 778                  {0x7F,0x08,0x08,0x08,0x7F},             //   (  7)  H - 0x0397 Greek Capital Letter Eta
 779                  {0x3E,0x49,0x49,0x49,0x3E},             //   (  8)    - 0x0398 Greek Capital Letter Theta
 780                  {0x00,0x41,0x7F,0x41,0x00},             //   (  9)  I - 0x0399 Greek Capital Letter Iota
 781                  {0x7F,0x08,0x14,0x22,0x41},             //   ( 10)  K - 0x039A Greek Capital Letter Kappa
 782                  {0x70,0x0E,0x01,0x0E,0x70},             //   ( 11)    - 0x039B Greek Capital Letter Lamda
 783                  {0x7F,0x02,0x0C,0x02,0x7F},             //   ( 12)  M - 0x039C Greek Capital Letter Mu
 784                  {0x7F,0x04,0x08,0x10,0x7F},             //   ( 13)  N - 0x039D Greek Capital Letter Nu
 785                  {0x63,0x5D,0x49,0x5D,0x63},             //   ( 14)    - 0x039E Greek Capital Letter Xi
 786                  {0x3E,0x41,0x41,0x41,0x3E},             //   ( 15)  O - 0x039F Greek Capital Letter Omicron
 787                  {0x41,0x3F,0x01,0x3F,0x41},             //   ( 16)    - 0x03A0 Greek Capital Letter Pi
 788                  {0x7F,0x09,0x09,0x09,0x06},             //   ( 17)  P - 0x03A1 Greek Capital Letter Rho
 789                  {0x63,0x55,0x49,0x41,0x41},             //   ( 18)    - 0x03A3 Greek Capital Letter Sigma
 790                  {0x01,0x01,0x7F,0x01,0x01},             //   ( 19)  T - 0x03A4 Greek Capital Letter Tau
 791                  {0x03,0x01,0x7E,0x01,0x03},             //   ( 20)    - 0x03A5 Greek Capital Letter Upsilon
 792                  {0x08,0x55,0x7F,0x55,0x08},             //   ( 21)    - 0x03A6 Greek Capital Letter Phi
 793                  {0x63,0x14,0x08,0x14,0x63},             //   ( 22)  X - 0x03A7 Greek Capital Letter Chi
 794                  {0x07,0x48,0x7F,0x48,0x07},             //   ( 23)    - 0x03A8 Greek Capital Letter Psi
 795                  {0x5E,0x61,0x01,0x61,0x5E},             //   ( 24)    - 0x03A9 Greek Capital Letter Omega
 796                  {0x38,0x44,0x48,0x30,0x4C},             //   ( 25)  a - 0x03B1 Greek Small Letter Alpha
 797                  {0x7C,0x2A,0x2A,0x2A,0x14},             //   ( 26)  B - 0x03B2 Greek Small Letter Beta
 798                  {0x44,0x38,0x04,0x04,0x08},             //   ( 27)  r - 0x03B3 Greek Small Letter Gamma
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 14  

 799                  {0x30,0x4B,0x4D,0x59,0x30},             //   ( 28)    - 0x03B4 Greek Small Letter Delta
 800                  {0x28,0x54,0x54,0x44,0x20},             //   ( 29)    - 0x03B5 Greek Small Letter Epsilon
 801                  {0x00,0x18,0x55,0x52,0x22},             //   ( 30)    - 0x03B6 Greek Small Letter Zeta
 802                  {0x3E,0x04,0x02,0x02,0x7C},             //   ( 31)  n - 0x03B7 Greek Small Letter Eta
 803                  {0x3C,0x4A,0x4A,0x4A,0x3C},             //   ( 32)    - 0x03B8 Greek Small Letter Theta
 804                  {0x00,0x3C,0x40,0x20,0x00},             //   ( 33)  i - 0x03B9 Greek Small Letter Iota
 805                  {0x7C,0x10,0x28,0x44,0x40},             //   ( 34)  k - 0x03BA Greek Small Letter Kappa
 806                  {0x41,0x32,0x0C,0x30,0x40},             //   ( 35)    - 0x03BB Greek Small Letter Lamda
 807                  {0x7E,0x20,0x20,0x10,0x3E},             //   ( 36)  u - 0x03BC Greek Small Letter Mu
 808                  {0x1C,0x20,0x40,0x20,0x1C},             //   ( 37)  v - 0x03BD Greek Small Letter Nu
 809                  {0x14,0x2B,0x2A,0x2A,0x60},             //   ( 38)    - 0x03BE Greek Small Letter Xi
 810                  {0x38,0x44,0x44,0x44,0x38},             //   ( 39)  o - 0x03BF Greek Small Letter Omicron
 811                  {0x44,0x3C,0x04,0x7C,0x44},             //   ( 40)    - 0x03C0 Greek Small Letter Pi
 812                  {0x70,0x28,0x24,0x24,0x18},             //   ( 41)  p - 0x03C1 Greek Small Letter Rho
 813                  {0x0C,0x12,0x12,0x52,0x60},             //   ( 42)    - 0x03C2 Greek Small Letter Final Sigma
 814                  {0x38,0x44,0x4C,0x54,0x24},             //   ( 43)    - 0x03C3 Greek Small Letter Sigma
 815                  {0x04,0x3C,0x44,0x20,0x00},             //   ( 44)  t - 0x03C4 Greek Small Letter Tau
 816                  {0x3C,0x40,0x40,0x20,0x1C},             //   ( 45)  v - 0x03C5 Greek Small Letter Upsilon
 817                  {0x18,0x24,0x7E,0x24,0x18},             //   ( 46)    - 0x03C6 Greek Small Letter Phi
 818                  {0x44,0x28,0x10,0x28,0x44},             //   ( 47)  x - 0x03C7 Greek Small Letter Chi
 819                  {0x0C,0x10,0x7E,0x10,0x0C},             //   ( 48)    - 0x03C8 Greek Small Letter Psi
 820                  {0x38,0x44,0x30,0x44,0x38},             //   ( 49)  w - 0x03C9 Greek Small Letter Omega
 821                  {0x0A,0x0A,0x4A,0x2A,0x1E},             //   ( 50)    - 0xFF66 Katakana Letter Wo
 822                  {0x04,0x44,0x34,0x14,0x0C},             //   ( 51)    - 0xFF67 Katakana Letter Small A
 823                  {0x20,0x10,0x78,0x04,0x00},             //   ( 52)    - 0xFF68 Katakana Letter Small I
 824                  {0x18,0x08,0x4C,0x48,0x38},             //   ( 53)    - 0xFF69 Katakana Letter Small U
 825                  {0x48,0x48,0x78,0x48,0x48},             //   ( 54)    - 0xFF6A Katakana Letter Small E
 826                  {0x48,0x28,0x18,0x7C,0x08},             //   ( 55)    - 0xFF6B Katakana Letter Small O
 827                  {0x08,0x7C,0x08,0x28,0x18},             //   ( 56)    - 0xFF6C Katakana Letter Small Ya
 828                  {0x40,0x48,0x48,0x78,0x40},             //   ( 57)    - 0xFF6D Katakana Letter Small Yu
 829                  {0x54,0x54,0x54,0x7C,0x00},             //   ( 58)    - 0xFF6E Katakana Letter Small Yo
 830                  {0x18,0x00,0x58,0x40,0x38},             //   ( 59)    - 0xFF6F Katakana Letter Small Tu
 831                  {0x08,0x08,0x08,0x08,0x08},             //   ( 60)    - 0xFF70 Katakana-Hiragana Prolonged Sound Mark
 832                  {0x01,0x41,0x3D,0x09,0x07},             //   ( 61)    - 0xFF71 Katakana Letter A
 833                  {0x10,0x08,0x7C,0x02,0x01},             //   ( 62)    - 0xFF72 Katakana Letter I
 834                  {0x0E,0x02,0x43,0x22,0x1E},             //   ( 63)    - 0xFF73 Katakana Letter U
 835                  {0x42,0x42,0x7E,0x42,0x42},             //   ( 64)    - 0xFF74 Katakana Letter E
 836                  {0x22,0x12,0x0A,0x7F,0x02},             //   ( 65)    - 0xFF75 Katakana Letter O
 837                  {0x42,0x3F,0x02,0x42,0x3E},             //   ( 66)    - 0xFF76 Katakana Letter Ka
 838                  {0x0A,0x0A,0x7F,0x0A,0x0A},             //   ( 67)    - 0xFF77 Katakana Letter Ki
 839                  {0x08,0x46,0x42,0x22,0x1E},             //   ( 68)    - 0xFF78 Katakana Letter Ku
 840                  {0x04,0x03,0x42,0x3E,0x02},             //   ( 69)    - 0xFF79 Katakana Letter Ke
 841                  {0x42,0x42,0x42,0x42,0x7E},             //   ( 70)    - 0xFF7A Katakana Letter Ko
 842                  {0x02,0x4F,0x22,0x1F,0x02},             //   ( 71)    - 0xFF7B Katakana Letter Sa
 843                  {0x4A,0x4A,0x40,0x20,0x1C},             //   ( 72)    - 0xFF7C Katakana Letter Shi
 844                  {0x42,0x22,0x12,0x2A,0x46},             //   ( 73)    - 0xFF7D Katakana Letter Su
 845                  {0x02,0x3F,0x42,0x4A,0x46},             //   ( 74)    - 0xFF7E Katakana Letter Se
 846                  {0x06,0x48,0x40,0x20,0x1E},             //   ( 75)    - 0xFF7F Katakana Letter So
 847                  {0x08,0x46,0x4A,0x32,0x1E},             //   ( 76)    - 0xFF80 Katakana Letter Ta
 848                  {0x0A,0x4A,0x3E,0x09,0x08},             //   ( 77)    - 0xFF81 Katakana Letter Chi
 849                  {0x0E,0x00,0x4E,0x20,0x1E},             //   ( 78)    - 0xFF82 Katakana Letter Tsu
 850                  {0x04,0x45,0x3D,0x05,0x04},             //   ( 79)    - 0xFF83 Katakana Letter Te
 851                  {0x00,0x7F,0x08,0x10,0x00},             //   ( 80)    - 0xFF84 Katakana Letter To
 852                  {0x44,0x24,0x1F,0x04,0x04},             //   ( 81)    - 0xFF85 Katakana Letter Na
 853                  {0x40,0x42,0x42,0x42,0x40},             //   ( 82)    - 0xFF86 Katakana Letter Ni
 854                  {0x42,0x2A,0x12,0x2A,0x06},             //   ( 83)    - 0xFF87 Katakana Letter Nu
 855                  {0x22,0x12,0x7B,0x16,0x22},             //   ( 84)    - 0xFF88 Katakana Letter Ne
 856                  {0x00,0x40,0x20,0x1F,0x00},             //   ( 85)    - 0xFF89 Katakana Letter No
 857                  {0x78,0x00,0x02,0x04,0x78},             //   ( 86)    - 0xFF8A Katakana Letter Ha
 858                  {0x3F,0x44,0x44,0x44,0x44},             //   ( 87)    - 0xFF8B Katakana Letter Hi
 859                  {0x02,0x42,0x42,0x22,0x1E},             //   ( 88)    - 0xFF8C Katakana Letter Fu
 860                  {0x04,0x02,0x04,0x08,0x30},             //   ( 89)    - 0xFF8D Katakana Letter He
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 15  

 861                  {0x32,0x02,0x7F,0x02,0x32},             //   ( 90)    - 0xFF8E Katakana Letter Ho
 862                  {0x02,0x12,0x22,0x52,0x0E},             //   ( 91)    - 0xFF8F Katakana Letter Ma
 863                  {0x00,0x2A,0x2A,0x2A,0x40},             //   ( 92)    - 0xFF90 Katakana Letter Mi
 864                  {0x38,0x24,0x22,0x20,0x70},             //   ( 93)    - 0xFF91 Katakana Letter Mu
 865                  {0x40,0x28,0x10,0x28,0x06},             //   ( 94)    - 0xFF92 Katakana Letter Me
 866                  {0x0A,0x3E,0x4A,0x4A,0x4A},             //   ( 95)    - 0xFF93 Katakana Letter Mo
 867                  {0x04,0x7F,0x04,0x14,0x0C},             //   ( 96)    - 0xFF94 Katakana Letter Ya
 868                  {0x40,0x42,0x42,0x7E,0x40},             //   ( 97)    - 0xFF95 Katakana Letter Yu
 869                  {0x4A,0x4A,0x4A,0x4A,0x7E},             //   ( 98)    - 0xFF96 Katakana Letter Yo
 870                  {0x04,0x05,0x45,0x25,0x1C},             //   ( 99)    - 0xFF97 Katakana Letter Ra
 871                  {0x0F,0x40,0x20,0x1F,0x00},             //   (100)    - 0xFF98 Katakana Letter Ri
 872                  {0x7C,0x00,0x7E,0x40,0x30},             //   (101)    - 0xFF99 Katakana Letter Ru
 873                  {0x7E,0x40,0x20,0x10,0x08},             //   (102)    - 0xFF9A Katakana Letter Re
 874                  {0x7E,0x42,0x42,0x42,0x7E},             //   (103)    - 0xFF9B Katakana Letter Ro
 875                  {0x0E,0x02,0x42,0x22,0x1E},             //   (104)    - 0xFF9C Katakana Letter Wa
 876                  {0x42,0x42,0x40,0x20,0x18},             //   (105)    - 0xFF9D Katakana Letter N
 877                  {0x02,0x04,0x01,0x02,0x00},             //   (106)    - 0xFF9E Katakana Voiced Sound Mark
 878                  {0x07,0x05,0x07,0x00,0x00},             //   (107)    - 0xFF9F Katakana Semi-Voiced Sound Mark
 879          };
 880          
 881          
 882          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 883          //  Show Regular Pattern (Full Screen)
 884          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 885          void Fill_RAM(unsigned char Data)
 886          {
 887   1      unsigned char i,j;
 888   1      
 889   1              for(i=0;i<8;i++)
 890   1              {
 891   2                      Set_Start_Page(i);
 892   2                      Set_Start_Column(0x00);
 893   2      
 894   2                      for(j=0;j<128;j++)
 895   2                      {
 896   3                              Write_Data(Data);
 897   3                      }
 898   2              }
 899   1      }
 900          
 901          
 902          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 903          //  Show Regular Pattern (Partial or Full Screen)
 904          //
 905          //    a: Start Page
 906          //    b: End Page
 907          //    c: Start Column
 908          //    d: Total Columns
 909          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 910          void Fill_Block(unsigned char Data, unsigned char a, unsigned char b, unsigned char c, unsigned char d)
 911          {
 912   1      unsigned char i,j;
 913   1              
 914   1              for(i=a;i<(b+1);i++)
 915   1              {
 916   2                      Set_Start_Page(i);
 917   2                      Set_Start_Column(c);
 918   2      
 919   2                      for(j=0;j<d;j++)
 920   2                      {
 921   3                              Write_Data(Data);
 922   3                      }
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 16  

 923   2              }
 924   1      }
 925          
 926          
 927          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 928          //  Show Checkboard (Full Screen)
 929          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 930          void Checkerboard()
 931          {
 932   1      unsigned char i,j;
 933   1              
 934   1              for(i=0;i<8;i++)
 935   1              {
 936   2                      Set_Start_Page(i);
 937   2                      Set_Start_Column(0x00);
 938   2      
 939   2                      for(j=0;j<64;j++)
 940   2                      {
 941   3                              Write_Data(0x55);
 942   3                              Write_Data(0xaa);
 943   3                      }
 944   2              }
 945   1      }
 946          
 947          
 948          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 949          //  Show Frame (Full Screen)
 950          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 951          void Frame()
 952          {
 953   1      unsigned char i,j;
 954   1              
 955   1              Set_Start_Page(0x00);
 956   1              Set_Start_Column(XLevel);
 957   1      
 958   1              for(i=0;i<Max_Column;i++)
 959   1              {
 960   2                      Write_Data(0x01);
 961   2              }
 962   1      
 963   1              Set_Start_Page(0x07);
 964   1              Set_Start_Column(XLevel);
 965   1      
 966   1              for(i=0;i<Max_Column;i++)
 967   1              {
 968   2                      Write_Data(0x80);
 969   2              }
 970   1      
 971   1              for(i=0;i<8;i++)
 972   1              {
 973   2                      Set_Start_Page(i);
 974   2      
 975   2                      for(j=0;j<Max_Column;j+=(Max_Column-1))
 976   2                      {
 977   3                              Set_Start_Column(XLevel+j);
 978   3      
 979   3                              Write_Data(0xFF);
 980   3                      }
 981   2              }
 982   1      }
 983          
 984          
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 17  

 985          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 986          //  Show Character (5x7)
 987          //
 988          //    a: Database
 989          //    b: Ascii
 990          //    c: Start Page
 991          //    d: Start Column
 992          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 993          void Show_Font57(unsigned char a, unsigned char b, unsigned char c, unsigned char d)
 994          {
 995   1      unsigned char *Src_Pointer;
 996   1      unsigned char i;
 997   1      
 998   1              switch(a)
 999   1              {
1000   2                      case 1:
1001   2                              Src_Pointer=&Ascii_1[(b-1)][0];
1002   2                              break;
1003   2                      case 2:
1004   2                              Src_Pointer=&Ascii_2[(b-1)][0];
1005   2                              break;
1006   2              }
1007   1              Set_Start_Page(c);
1008   1              Set_Start_Column(d);
1009   1      
1010   1              for(i=0;i<5;i++)
1011   1              {
1012   2                      Write_Data(*Src_Pointer);
1013   2                      Src_Pointer++;
1014   2              }
1015   1              Write_Data(0x00);
1016   1      }
1017          
1018          
1019          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1020          //  Show String
1021          //
1022          //    a: Database
1023          //    b: Start Page
1024          //    c: Start Column
1025          //    * Must write "0" in the end...
1026          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1027          void Show_String(unsigned char a, unsigned char *Data_Pointer, unsigned char b, unsigned char c)
1028          {
1029   1      unsigned char *Src_Pointer;
1030   1      
1031   1              Src_Pointer=Data_Pointer;
1032   1              Show_Font57(1,96,b,c);                  // No-Break Space
1033   1                                                      //   Must be written first before the string start...
1034   1      
1035   1              while(1)
1036   1              {
1037   2                      Show_Font57(a,*Src_Pointer,b,c);
1038   2                      Src_Pointer++;
1039   2                      c+=6;
1040   2                      if(*Src_Pointer == 0) break;
1041   2              }
1042   1      }
1043          
1044          
1045          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1046          //  Show Pattern (Partial or Full Screen)
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 18  

1047          //
1048          //    a: Start Page
1049          //    b: End Page
1050          //    c: Start Column
1051          //    d: Total Columns
1052          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1053          void Show_Pattern(unsigned char *Data_Pointer, unsigned char a, unsigned char b, unsigned char c, unsigned
             - char d)
1054          {
1055   1      unsigned char *Src_Pointer;
1056   1      unsigned char i,j;
1057   1      
1058   1              Src_Pointer=Data_Pointer;
1059   1              for(i=a;i<(b+1);i++)
1060   1              {
1061   2                      Set_Start_Page(i);
1062   2                      Set_Start_Column(c);
1063   2      
1064   2                      for(j=0;j<d;j++)
1065   2                      {
1066   3                              Write_Data(*Src_Pointer);
1067   3                              Src_Pointer++;
1068   3                      }
1069   2              }
1070   1      }
1071          
1072          
1073          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1074          //  Vertical / Fade Scrolling (Partial or Full Screen)
1075          //
1076          //    a: Scrolling Direction
1077          //       "0x00" (Upward)
1078          //       "0x01" (Downward)
1079          //    b: Set Top Fixed Area
1080          //    c: Set Vertical Scroll Area
1081          //    d: Set Numbers of Row Scroll per Step
1082          //    e: Set Time Interval between Each Scroll Step
1083          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1084          void Vertical_Scroll(unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned char e)
1085          {
1086   1      unsigned int i,j;       
1087   1      
1088   1              Write_Command(0xA3);                    // Set Vertical Scroll Area
1089   1              Write_Command(b);                       //   Default => 0x00 (Top Fixed Area)
1090   1              Write_Command(c);                       //   Default => 0x40 (Vertical Scroll Area)
1091   1      
1092   1              switch(a)
1093   1              {
1094   2                      case 0:
1095   2                              for(i=0;i<c;i+=d)
1096   2                              {
1097   3                                      Set_Start_Line(i);
1098   3                                      for(j=0;j<e;j++)
1099   3                                      {
1100   4                                              uDelay(200);
1101   4                                      }
1102   3                              }
1103   2                              break;
1104   2                      case 1:
1105   2                              for(i=0;i<c;i+=d)
1106   2                              {
1107   3                                      Set_Start_Line(c-i);
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 19  

1108   3                                      for(j=0;j<e;j++)
1109   3                                      {
1110   4                                              uDelay(200);
1111   4                                      }
1112   3                              }
1113   2                              break;
1114   2              }
1115   1              Set_Start_Line(0x00);
1116   1      }
1117          
1118          
1119          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1120          //  Continuous Horizontal Scrolling (Partial or Full Screen)
1121          //
1122          //    a: Scrolling Direction
1123          //       "0x00" (Rightward)
1124          //       "0x01" (Leftward)
1125          //    b: Define Start Page Address
1126          //    c: Define End Page Address
1127          //    d: Set Time Interval between Each Scroll Step in Terms of Frame Frequency
1128          //    e: Delay Time
1129          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1130          void Horizontal_Scroll(unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned char e
             -)
1131          {
1132   1              Write_Command(0x26|a);                  // Horizontal Scroll Setup
1133   1              Write_Command(0x00);                    //           => (Dummy Write for First Parameter)
1134   1              Write_Command(b);
1135   1              Write_Command(d);
1136   1              Write_Command(c);
1137   1              Write_Command(0x2F);                    // Activate Scrolling
1138   1              Delay(e);
1139   1      }
1140          
1141          
1142          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1143          //  Continuous Vertical / Horizontal / Diagonal Scrolling (Partial or Full Screen)
1144          //
1145          //    a: Scrolling Direction
1146          //       "0x00" (Vertical & Rightward)
1147          //       "0x01" (Vertical & Leftward)
1148          //    b: Define Start Row Address (Horizontal / Diagonal Scrolling)
1149          //    c: Define End Page Address (Horizontal / Diagonal Scrolling)
1150          //    d: Set Top Fixed Area (Vertical Scrolling)
1151          //    e: Set Vertical Scroll Area (Vertical Scrolling)
1152          //    f: Set Numbers of Row Scroll per Step (Vertical / Diagonal Scrolling)
1153          //    g: Set Time Interval between Each Scroll Step in Terms of Frame Frequency
1154          //    h: Delay Time
1155          //    * d+e must be less than or equal to the Multiplex Ratio...
1156          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1157          void Continuous_Scroll(unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned char e
             -, unsigned char f, unsigned char g, unsigned char h)
1158          {
1159   1              Write_Command(0xA3);                    // Set Vertical Scroll Area
1160   1              Write_Command(d);                       //   Default => 0x00 (Top Fixed Area)
1161   1              Write_Command(e);                       //   Default => 0x40 (Vertical Scroll Area)
1162   1      
1163   1              Write_Command(0x29+a);                  // Continuous Vertical & Horizontal Scroll Setup
1164   1              Write_Command(0x00);                    //           => (Dummy Write for First Parameter)
1165   1              Write_Command(b);
1166   1              Write_Command(g);
1167   1              Write_Command(c);
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 20  

1168   1              Write_Command(f);
1169   1              Write_Command(0x2F);                    // Activate Scrolling
1170   1              Delay(h);
1171   1      }
1172          
1173          
1174          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1175          //  Deactivate Scrolling (Full Screen)
1176          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1177          void Deactivate_Scroll()
1178          {
1179   1              Write_Command(0x2E);                    // Deactivate Scrolling
1180   1      }
1181          
1182          
1183          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1184          //  Fade In (Full Screen)
1185          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1186          void Fade_In()
1187          {
1188   1      unsigned int i; 
1189   1      
1190   1              Set_Display_On_Off(0x01);
1191   1              for(i=0;i<(Brightness+1);i++)
1192   1              {
1193   2                      Set_Contrast_Control(i);
1194   2                      uDelay(200);
1195   2                      uDelay(200);
1196   2                      uDelay(200);
1197   2              }
1198   1      }
1199          
1200          
1201          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1202          //  Fade Out (Full Screen)
1203          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1204          void Fade_Out()
1205          {
1206   1      unsigned int i; 
1207   1      
1208   1              for(i=(Brightness+1);i>0;i--)
1209   1              {
1210   2                      Set_Contrast_Control(i-1);
1211   2                      uDelay(200);
1212   2                      uDelay(200);
1213   2                      uDelay(200);
1214   2              }
1215   1              Set_Display_On_Off(0x00);
1216   1      }
1217          
1218          
1219          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1220          //  Sleep Mode
1221          //
1222          //    "0x00" Enter Sleep Mode
1223          //    "0x01" Exit Sleep Mode
1224          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1225          void Sleep(unsigned char a)
1226          {
1227   1              switch(a)
1228   1              {
1229   2                      case 0:
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 21  

1230   2                              Set_Display_On_Off(0x00);
1231   2                              Set_Entire_Display(0x01);
1232   2                              break;
1233   2                      case 1:
1234   2                              Set_Entire_Display(0x00);
1235   2                              Set_Display_On_Off(0x01);
1236   2                              break;
1237   2              }
1238   1      }
1239          
1240          
1241          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1242          //  Connection Test
1243          //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1244          void Test()
1245          {
1246   1      unsigned char i;
1247   1      
1248   1              RES=0;
1249   1              for(i=0;i<200;i++)
1250   1              {
1251   2                      uDelay(200);
1252   2              }
1253   1              RES=1;
1254   1      
1255   1              Set_Entire_Display(0x01);               // Enable Entire Display On (0x00/0x01)
1256   1      
1257   1              while(1)
1258   1              {
1259   2                      Set_Display_On_Off(0x01);       // Display On (0x00/0x01)
1260   2                      Delay(2);
1261   2                      Set_Display_On_Off(0x00);       // Display Off (0x00/0x01)
1262   2                      Delay(2);
1263   2              }
1264   1      }
1265          
1266          
1267          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1268          //  Initialization
1269          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1270          void OLED_Init_E()                              // VCC Supplied Externally
1271          {
1272   1      unsigned char i;
1273   1      
1274   1              RES=0;
1275   1              for(i=0;i<200;i++)
1276   1              {
1277   2                      uDelay(200);
1278   2              }
1279   1              RES=1;
1280   1      
1281   1              Set_Display_On_Off(0x00);               // Display Off (0x00/0x01)
1282   1              Set_Display_Clock(0x80);                // Set Clock as 100 Frames/Sec
1283   1              Set_Multiplex_Ratio(0x3F);              // 1/64 Duty (0x0F~0x3F)
1284   1              Set_Display_Offset(0x00);               // Shift Mapping RAM Counter (0x00~0x3F)
1285   1              Set_Start_Line(0x00);                   // Set Mapping RAM Display Start Line (0x00~0x3F)
1286   1              Set_Charge_Pump(0x00);                  // Disable Embedded DC/DC Converter (0x00/0x04)
1287   1              Set_Addressing_Mode(0x02);              // Set Page Addressing Mode (0x00/0x01/0x02)
1288   1              Set_Segment_Remap(0x01);                // Set SEG/Column Mapping (0x00/0x01)
1289   1              Set_Common_Remap(0x08);                 // Set COM/Row Scan Direction (0x00/0x08)
1290   1              Set_Common_Config(0x10);                // Set Sequential Configuration (0x00/0x10)
1291   1              Set_Contrast_Control(Brightness);       // Set SEG Output Current
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 22  

1292   1              Set_Precharge_Period(0x22);             // Set Pre-Charge as 2 Clocks & Discharge as 2 Clock
1293   1              Set_VCOMH(0x40);                        // Set VCOM Deselect Level
1294   1              Set_Entire_Display(0x00);               // Disable Entire Display On (0x00/0x01)
1295   1              Set_Inverse_Display(0x00);              // Disable Inverse Display On (0x00/0x01)
1296   1      
1297   1              Fill_RAM(0x00);                         // Clear Screen
1298   1      
1299   1              Set_Display_On_Off(0x01);               // Display On (0x00/0x01)
1300   1      }
1301          
1302          
1303          void OLED_Init_I()                              // VCC Generated by Internal DC/DC Circuit
1304          {
1305   1      unsigned char i;
1306   1      
1307   1              RES=0;
1308   1              for(i=0;i<200;i++)
1309   1              {
1310   2                      uDelay(200);
1311   2                      //uDelay(200);
1312   2              }
1313   1              RES=1;
1314   1      
1315   1              Set_Display_On_Off(0x00);               // Display Off (0x00/0x01)
1316   1              Set_Display_Clock(0x80);                // Set Clock as 100 Frames/Sec
1317   1              Set_Multiplex_Ratio(0x3F);              // 1/64 Duty (0x0F~0x3F)
1318   1              Set_Display_Offset(0x00);               // Shift Mapping RAM Counter (0x00~0x3F)
1319   1              Set_Start_Line(0x00);                   // Set Mapping RAM Display Start Line (0x00~0x3F)
1320   1              Set_Charge_Pump(0x04);                  // Enable Embedded DC/DC Converter (0x00/0x04)
1321   1              Set_Addressing_Mode(0x02);              // Set Page Addressing Mode (0x00/0x01/0x02)
1322   1              Set_Segment_Remap(0x01);                // Set SEG/Column Mapping (0x00/0x01)
1323   1              Set_Common_Remap(0x00);                 // Set COM/Row Scan Direction (0x00/0x08)  ////////////////
1324   1              Set_Common_Config(0x10);                // Set Sequential Configuration (0x00/0x10)
1325   1              Set_Contrast_Control(Brightness);       // Set SEG Output Current
1326   1              Set_Precharge_Period(0xF1);             // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
1327   1              Set_VCOMH(0x40);                        // Set VCOM Deselect Level
1328   1              Set_Entire_Display(0x00);               // Disable Entire Display On (0x00/0x01)
1329   1              Set_Inverse_Display(0x00);              // Disable Inverse Display On (0x00/0x01)
1330   1      
1331   1              Fill_RAM(0x00);                         // Clear Screen
1332   1      
1333   1              Set_Display_On_Off(0x01);               // Display On (0x00/0x01)
1334   1      }
1335          /*******************************function************************************************************/
1336          //*******************显示X，Y坐标处的一个字符。一行可以显示16个字符。X为0到15，Y为0到3**************
1337          void disc(unsigned char X,unsigned char Y,unsigned char * c)
1338          {
1339   1              unsigned char n;
1340   1              Set_Common_Remap(0x00);                 // Set COM/Row Scan Direction (0x00/0x08) 
1341   1              Write_Command (0xb7-(Y<<1));       //b7 Page Address
1342   1              if(X%2)
1343   1                      Write_Command (0x08);
1344   1              else
1345   1                      Write_Command (0x00);
1346   1              Write_Command (0x10+(X>>1));
1347   1              for(n=0;n<=15;n+=2)
1348   1                      Write_Data(*(c+n));
1349   1      
1350   1              Write_Command (0xb7-(Y<<1)-1);
1351   1              if(X%2)
1352   1                      Write_Command (0x08);
1353   1              else
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 23  

1354   1                      Write_Command (0x00);
1355   1              Write_Command (0x10+(X>>1));
1356   1              for(n=1;n<=15;n+=2)
1357   1                      Write_Data(*(c+n));
1358   1      }
1359          // X  is 0 to 7
1360          void dish(unsigned char X,unsigned char Y,unsigned char * h)
1361          {
1362   1              unsigned char n;
1363   1              Set_Common_Remap(0x00);                 // Set COM/Row Scan Direction (0x00/0x08) 
1364   1              Write_Command (0xb7-(Y<<1));
1365   1              if(X%2)
1366   1                      Write_Command (0x08);
1367   1              else
1368   1                      Write_Command (0x00);
1369   1              Write_Command (0x10+(X>>1));
1370   1              for(n=0;n<=31;n+=2)
1371   1                      Write_Data(*(h+n));
1372   1      
1373   1              Write_Command (0xb7-(Y<<1)-1);
1374   1              if(X%2)
1375   1                      Write_Command (0x08);
1376   1              else
1377   1                      Write_Command (0x00);
1378   1              Write_Command (0x10+(X>>1));
1379   1              for(n=1;n<=31;n+=2)
1380   1                      Write_Data(*(h+n));
1381   1      }
1382          void disn(unsigned char X,unsigned char Y,unsigned char n)
1383          {
1384   1              unsigned char m;
1385   1              Set_Common_Remap(0x00);                 // Set COM/Row Scan Direction (0x00/0x08) 
1386   1              Write_Command (0xb7-(Y<<1));
1387   1              if(X%2)
1388   1                      Write_Command (0x08);
1389   1              else
1390   1                      Write_Command (0x00);
1391   1              Write_Command (0x10+(X>>1));
1392   1              for(m=0;m<=15;m+=2)
1393   1                      Write_Data(*(num[n]+m));                     
1394   1      
1395   1              Write_Command (0xb7-(Y<<1)-1);
1396   1              if(X%2)
1397   1                      Write_Command (0x08);
1398   1              else
1399   1                      Write_Command (0x00);
1400   1              Write_Command (0x10+(X>>1));
1401   1              for(m=1;m<=15;m+=2)
1402   1                      Write_Data(*(num[n]+m));
1403   1      }
1404          
1405          
1406          /////////////////////////////////////////
1407          
1408          void welcome(void)
1409          {
1410   1        //一屏显示32个汉字
1411   1       // dish(0,0,dian);dish(2,0,zi);dish(4,0,wen);dish(6,0,du);dish(8,0,shidu);dish(10,0,zhou);dish(12,0,yi);d
             -ish(14,0,er);
1412   1       // dish(0,1,dian);dish(2,1,zi);dish(4,1,wen);dish(6,1,du);dish(8,1,shidu);dish(10,1,zhou);dish(12,1,yi);d
             -ish(14,1,er);
1413   1       // dish(0,2,dian);dish(2,2,zi);dish(4,2,wen);dish(6,2,du);dish(8,2,shidu);dish(10,2,zhou);dish(12,2,yi);d
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 24  

             -ish(14,2,er);
1414   1       // dish(0,3,dian);dish(2,3,zi);dish(4,3,wen);dish(6,3,du);dish(8,3,shidu);dish(10,3,zhou);dish(12,3,yi);d
             -ish(14,3,er);
1415   1        
1416   1      //温度湿度
1417   1        disn(1,0,2);disn(2,0,0);disn(3,0,1);disn(4,0,0);dish(5,0,year);
1418   1        disn(7,0,1);disn(8,0,0);dish(9,0,month);disn(11,0,0);disn(12,0,1);dish(13,0,day);
1419   1      
1420   1        disn(1,1,1);disn(2,1,2);disc(3,1,mao);disn(4,1,0);
1421   1        disn(5,1,0);disc(6,1,mao);disn(7,1,0);disn(8,1,0);
1422   1      
1423   1        dish(11,1,zhou);dish(13,1,si);
1424   1      
1425   1        dish(1,2,wen);dish(3,2,du);disc(5,2,mao);    //dish 全字
1426   1        //disn(6,2,1);
1427   1      
1428   1        //disn(7,2,1);disn(8,2,9);disc(9,2,dianhao);disn(10,2,6);//disn 数字
1429   1        dish(13,2,dufuhao);//dish
1430   1      
1431   1        dish(1,3,shidu);dish(3,3,du);disc(5,3,mao);
1432   1        //disn(6,3,1);
1433   1        disn(7,3,6);disn(8,3,2);disc(9,3,dianhao);disn(10,3,4);//disn 数字
1434   1        disc(12,3,baifhao);disc(13,3,R);disc(14,3,H);//disc半字
1435   1                 
1436   1      }
1437          
1438          void tm0_ini(void)
1439          {
1440   1         TMOD=0x01;
1441   1         ET0=1;
1442   1         EA=1;
1443   1         TR0=1;
1444   1      }
1445          
1446          
1447          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1448          //  Main Program
1449          //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1450          void main()
1451          {
1452   1      
1453   1      
1454   1      
1455   1              P1=0xFF;
1456   1              P3=0xFF;
1457   1              Init_DS18B20();
1458   1              OLED_Init_I();
1459   1              //OLED_Init_E();
1460   1              stc12C4052ad_uart_init();
1461   1      
1462   1       //Fill_RAM(0x00);                      // Clear Screen
1463   1       //Set_Common_Remap(0x08);                      // Set COM/Row Scan Direction (0x00/0x08)  两种显示字需要的开始地址不同
1464   1      // Show Pattern - UniV OLED
1465   1      // Show_Pattern(&UniV[0][0],0x02,0x05,XLevel+0x28,0x30);
1466   1      // Show_Pattern(&kemei[0][0],0x02,0x06,XLevel+0x00,0x80); //show keimeidianzi
1467   1       //Show_Pattern(&shiyan[0][0],0x00,0x07,XLevel+0x00,0x80);
1468   1              Delay(1);
1469   1      //      while(1);
1470   1      
1471   1              while(1)
1472   1              {       send_UART(0x55);
1473   2              send_UART(0xaa);
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 25  

1474   2      
1475   2              welcome();
1476   2              Temperature = ReadTemperature();
1477   2         //Temperature = 0x00fa;
1478   2        
1479   2       t0 = Temperature/1000;
1480   2       t1 = Temperature%1000/100;
1481   2       t2 = Temperature%100/10;
1482   2       t3 = Temperature%10;
1483   2       disn(7,2,t0);disn(8,2,t1);disn(9,2,t2);disc(10,2,dianhao);disn(11,2,t3);//disn 数字
1484   2      
1485   2       send_UART(0x55);
1486   2       send_UART(wh);
1487   2      
1488   2       send_UART(0xaa);
1489   2       send_UART(wl); 
1490   2       Delay(5);
1491   2       Fill_RAM(0x00);                        // Clear Screen
1492   2      
1493   2      
1494   2                 Set_Common_Remap(0x08);                      // Set COM/Row Scan Direction (0x00/0x08)  两种显示字需要的开始地址不同
1495   2      
1496   2        Fill_RAM(0x00);                       // Clear Screen
1497   2        Show_Pattern(&kemei[0][0],0x02,0x06,XLevel+0x00,0x80); //show keimeidianzi
1498   2                      Delay(10);
1499   2       // Fill_RAM(0x00);                     // Clear Screen
1500   2      // Show_Pattern(&shiyan[0][0],0x00,0x07,XLevel+0x00,0x80);
1501   2              // Fade In/Out (Full Screen)
1502   2                      Fade_Out();
1503   2                      Fade_In();
1504   2                      Fade_Out();
1505   2                      Fade_In();
1506   2                      Delay(1);
1507   2      
1508   2              // Scrolling (Partial or Full Screen)
1509   2                      Vertical_Scroll(0x00,0x00,Max_Row,0x01,0x20);
1510   2                                                      // Upward
1511   2                      Delay(1);
1512   2                      Vertical_Scroll(0x01,0x00,Max_Row,0x01,0x20);
1513   2                                                      // Downward
1514   2                      Delay(1);
1515   2                      Deactivate_Scroll();
1516   2                      Continuous_Scroll(0x00,0x00,0x00,0x00,0x20,0x01,0x00,0x01);
1517   2                                                      // Upward - Top Area
1518   2                      Continuous_Scroll(0x00,0x00,0x00,0x00,0x20,0x1F,0x00,0x01);
1519   2                                                      // Downward - Top Area
1520   2                      Continuous_Scroll(0x00,0x00,0x03,0x00,0x20,0x01,0x00,0x02);
1521   2                                                      // Up & Rightward - Top Area
1522   2                      Continuous_Scroll(0x01,0x00,0x03,0x00,0x20,0x1F,0x00,0x02);
1523   2                                                      // Down & Leftward - Top Area
1524   2                      Continuous_Scroll(0x01,0x04,0x07,0x00,0x20,0x01,0x00,0x02);
1525   2                                                      // Upward - Top Area
1526   2                                                      // Leftward - Bottom Area
1527   2                      Continuous_Scroll(0x00,0x04,0x07,0x00,0x20,0x1F,0x00,0x02);
1528   2                                                      // Downward - Top Area
1529   2                                                      // Rightward - Bottom Area
1530   2                      Deactivate_Scroll();
1531   2      
1532   2              // All Pixels On (Test Pattern)
1533   2                      Fill_RAM(0xFF);
1534   2                      Delay(1);
1535   2      
C51 COMPILER V7.10   NEW096HANZI                                                           09/04/2011 19:49:48 PAGE 26  

1536   2              // Checkerboard (Test Pattern)
1537   2                      Checkerboard();
1538   2                      Delay(1);
1539   2                      Fill_RAM(0x00);                 // Clear Screen
1540   2      
1541   2              // Frame (Test Pattern)
1542   2                      Frame();
1543   2                      Delay(1);
1544   2      
1545   2              // Show String - keimei 15953865293
1546   2                      Show_String(1,&Name,0x03,XLevel+0x25);
1547   2                      Show_String(1,&Tel,0x04,XLevel+0x16);
1548   2                      Delay(1);
1549   2                      Fill_RAM(0x00);                 // Clear Screen           
1550   2                      send_UART(0xaa);
1551   2                      send_UART(0x55);          
1552   2              }                       
1553   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2751    ----
   CONSTANT SIZE    =   3519    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19      57
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
